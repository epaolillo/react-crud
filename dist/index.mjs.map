{"version":3,"file":"index.mjs","sources":["../node_modules/react/cjs/react-jsx-runtime.production.js","../node_modules/react/cjs/react-jsx-runtime.development.js","../node_modules/react/jsx-runtime.js","../src/pages/Login/index.jsx","../src/components/Sidebar/index.jsx","../src/services/affiliatesService.js","../src/utils/affiliateUtils.js","../src/contexts/AffiliateContext.jsx","../src/components/Navbar/index.jsx","../src/components/EditorJs/index.jsx","../src/components/SkeletonField/index.jsx","../src/components/DynamicPage/index.jsx","../src/components/DynamicModal/index.jsx","../src/components/DynamicStory/index.jsx","../src/components/EntityTable/index.jsx","../src/pages/Admin/index.jsx","../src/utils.js","../src/services/EntityService.js","../src/utils/entityFactory.jsx","../src/index.jsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\nfunction jsxProd(type, config, maybeKey) {\n  var key = null;\n  void 0 !== maybeKey && (key = \"\" + maybeKey);\n  void 0 !== config.key && (key = \"\" + config.key);\n  if (\"key\" in config) {\n    maybeKey = {};\n    for (var propName in config)\n      \"key\" !== propName && (maybeKey[propName] = config[propName]);\n  } else maybeKey = config;\n  config = maybeKey.ref;\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: void 0 !== config ? config : null,\n    props: maybeKey\n  };\n}\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsxProd;\nexports.jsxs = jsxProd;\n","/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\n\"production\" !== process.env.NODE_ENV &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n        case REACT_ACTIVITY_TYPE:\n          return \"Activity\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_PORTAL_TYPE:\n            return \"Portal\";\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function UnknownOwner() {\n      return Error(\"react-stack-top-frame\");\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(\n      type,\n      key,\n      self,\n      source,\n      owner,\n      props,\n      debugStack,\n      debugTask\n    ) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        self,\n        source,\n        getOwner(),\n        maybeKey,\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = require(\"react\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray,\n      createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          };\n    React = {\n      react_stack_bottom_frame: function (callStackForError) {\n        return callStackForError();\n      }\n    };\n    var specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(\n      React,\n      UnknownOwner\n    )();\n    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsx = function (type, config, maybeKey, source, self) {\n      var trackActualOwner =\n        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        !1,\n        source,\n        self,\n        trackActualOwner\n          ? Error(\"react-stack-top-frame\")\n          : unknownOwnerDebugStack,\n        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n      );\n    };\n    exports.jsxs = function (type, config, maybeKey, source, self) {\n      var trackActualOwner =\n        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        !0,\n        source,\n        self,\n        trackActualOwner\n          ? Error(\"react-stack-top-frame\")\n          : unknownOwnerDebugStack,\n        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n      );\n    };\n  })();\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './login.css';\n//import logo from '../../assets/logo.svg';\n\nconst Login = () => {\n    const navigate = useNavigate();\n    const [loading, setLoading] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n    const [form, setForm] = useState({\n        email: '',\n        password: '',\n        remember: false\n    });\n    const [errors, setErrors] = useState({});\n    const [alert, setAlert] = useState({\n        show: false,\n        type: 'error',\n        message: ''\n    });\n\n    // Check if user is already logged in\n    useEffect(() => {\n        const checkAuth = async () => {\n            try {\n                const response = await fetch('/api/auth/me');\n                if (response.ok) {\n                    const data = await response.json();\n                    if (data.success) {\n                        // User is already logged in, redirect to admin\n                        navigate('/admin');\n                    }\n                }\n            } catch (error) {\n                // User is not logged in, continue with login page\n                console.log('Not authenticated');\n            }\n        };\n\n        checkAuth();\n\n        // Auto-focus email field\n        setTimeout(() => {\n            const emailField = document.getElementById('email');\n            if (emailField) {\n                emailField.focus();\n            }\n        }, 100);\n    }, [navigate]);\n\n    const validateForm = () => {\n        let isValid = true;\n        const newErrors = {};\n\n        // Validate email\n        if (!form.email) {\n            newErrors.email = 'Email is required';\n            isValid = false;\n        } else if (!isValidEmail(form.email)) {\n            newErrors.email = 'Please enter a valid email address';\n            isValid = false;\n        }\n\n        // Validate password\n        if (!form.password) {\n            newErrors.password = 'Password is required';\n            isValid = false;\n        } else if (form.password.length < 6) {\n            newErrors.password = 'Password must be at least 6 characters';\n            isValid = false;\n        }\n\n        setErrors(newErrors);\n        return isValid;\n    };\n\n    const isValidEmail = (email) => {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    };\n\n    const showAlert = (type, message) => {\n        setAlert({\n            show: true,\n            type,\n            message\n        });\n    };\n\n    const hideAlert = () => {\n        setAlert({ ...alert, show: false });\n    };\n\n    const handleInputChange = (e) => {\n        const { name, value, type, checked } = e.target;\n        setForm(prev => ({\n            ...prev,\n            [name]: type === 'checkbox' ? checked : value\n        }));\n    };\n\n    const handleLogin = async (e) => {\n        e.preventDefault();\n        \n        // Reset errors and alerts\n        setErrors({});\n        hideAlert();\n\n        // Validate form\n        if (!validateForm()) {\n            return;\n        }\n\n        setLoading(true);\n\n        try {\n            const response = await fetch('/api/auth/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    email: form.email,\n                    password: form.password\n                })\n            });\n\n            const data = await response.json();\n\n            if (data.success) {\n                showAlert('success', 'Login successful! Redirecting...');\n                \n                // Redirect to admin panel\n                setTimeout(() => {\n                    navigate('/admin');\n                }, 1000);\n            } else {\n                showAlert('error', data.message || 'Login failed');\n            }\n        } catch (error) {\n            console.error('Login error:', error);\n            showAlert('error', 'Network error. Please try again.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"login-container\">\n            <div className=\"container\">\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-md-6 col-lg-5\">\n                        <div className=\"login-card p-5\">\n                            {/* Header */}\n                            <div className=\"text-center mb-5\">\n                                {/* <img src={logo} alt=\"Logo\" className=\"logo-img\" /> */}\n                                <h1 className=\"login-header display-5 mb-2\">\n                                    Immergo Producer\n                                </h1>\n                                <p className=\"text-muted\">Sign in to your admin panel</p>\n                            </div>\n\n                            {/* Alert Messages */}\n                            {alert.show && (\n                                <div className={`alert alert-dismissible fade show mb-4 ${alert.type === 'error' ? 'alert-danger' : 'alert-success'}`}>\n                                    <span>{alert.message}</span>\n                                    <button type=\"button\" className=\"btn-close\" onClick={hideAlert}></button>\n                                </div>\n                            )}\n\n                            {/* Login Form */}\n                            <form onSubmit={handleLogin} noValidate>\n                                {/* Email Field */}\n                                <div className=\"mb-4\">\n                                    <label htmlFor=\"email\" className=\"form-label fw-semibold\">\n                                        <i className=\"fas fa-envelope me-2\"></i>Email Address\n                                    </label>\n                                    <input \n                                        type=\"email\" \n                                        id=\"email\"\n                                        name=\"email\"\n                                        className=\"form-control\"\n                                        value={form.email}\n                                        onChange={handleInputChange}\n                                        placeholder=\"Enter your email\"\n                                        required\n                                        autoComplete=\"email\"\n                                    />\n                                    {errors.email && (\n                                        <div className=\"text-danger small mt-1\">{errors.email}</div>\n                                    )}\n                                </div>\n\n                                {/* Password Field */}\n                                <div className=\"mb-4\">\n                                    <label htmlFor=\"password\" className=\"form-label fw-semibold\">\n                                        <i className=\"fas fa-lock me-2\"></i>Password\n                                    </label>\n                                    <div className=\"position-relative\">\n                                        <input \n                                            type={showPassword ? 'text' : 'password'}\n                                            id=\"password\"\n                                            name=\"password\"\n                                            className=\"form-control pe-5\"\n                                            value={form.password}\n                                            onChange={handleInputChange}\n                                            placeholder=\"Enter your password\"\n                                            required\n                                            autoComplete=\"current-password\"\n                                        />\n                                        <button \n                                            type=\"button\"\n                                            className=\"btn btn-link position-absolute top-50 end-0 translate-middle-y pe-3\"\n                                            onClick={() => setShowPassword(!showPassword)}\n                                        >\n                                            <i className={`${showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'} text-muted`}></i>\n                                        </button>\n                                    </div>\n                                    {errors.password && (\n                                        <div className=\"text-danger small mt-1\">{errors.password}</div>\n                                    )}\n                                </div>\n\n                                {/* Remember Me */}\n                                <div className=\"mb-4\">\n                                    <div className=\"form-check\">\n                                        <input \n                                            type=\"checkbox\" \n                                            id=\"remember\"\n                                            name=\"remember\"\n                                            className=\"form-check-input\"\n                                            checked={form.remember}\n                                            onChange={handleInputChange}\n                                        />\n                                        <label htmlFor=\"remember\" className=\"form-check-label\">\n                                            Remember me\n                                        </label>\n                                    </div>\n                                </div>\n\n                                {/* Submit Button */}\n                                <div className=\"d-grid mb-4\">\n                                    <button \n                                        type=\"submit\" \n                                        className=\"btn btn-login text-white\"\n                                        disabled={loading}\n                                    >\n                                        {!loading ? (\n                                            <>\n                                                <i className=\"fas fa-sign-in-alt me-2\"></i>\n                                                Sign In\n                                            </>\n                                        ) : (\n                                            <>\n                                                <i className=\"fas fa-spinner fa-spin me-2\"></i>\n                                                Signing in...\n                                            </>\n                                        )}\n                                    </button>\n                                </div>\n                            </form>\n\n                            {/* Footer */}\n                            <div className=\"text-center\">\n                                <small className=\"text-muted\">\n                                    <i className=\"fas fa-shield-alt me-1\"></i>\n                                    Secure login powered by JWT\n                                </small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Login; ","import { useState } from 'react';\nimport './sidebar.css';\n\nconst Sidebar = ({ \n    currentSection = 'dashboard', \n    onSectionChange, \n    mobileSidebarOpen = false,\n    userPermissions = [],\n    entities = [] // New prop for custom entities\n}) => {\n    \n    // Helper function to check permissions (simplified for now)\n    const hasPermission = (permission) => {\n        // For now, return true for all permissions\n        // This will be implemented properly with the permission system\n        return true;\n    };\n\n    const handleSectionClick = (section) => {\n        if (onSectionChange) {\n            onSectionChange(section);\n        }\n    };\n\n\n    // Merge default items with custom entities\n    const generateEntityItems = () => {\n        if (!entities || entities.length === 0) return [];\n\n        // Group entities by their group property or create a default \"Custom\" group\n        const entityGroups = entities.reduce((groups, entity) => {\n            const groupName = entity.group || 'Custom';\n            if (!groups[groupName]) {\n                groups[groupName] = {\n                    group: groupName,\n                    items: []\n                };\n            }\n            groups[groupName].items.push({\n                section: entity.key,\n                icon: entity.icon || 'fas fa-table',\n                label: entity.label,\n                permission: entity.permission\n            });\n            return groups;\n        }, {});\n\n        return Object.values(entityGroups);\n    };\n\n    const sidebarItems = [...generateEntityItems()];\n\n    const renderSidebarItem = (item) => (\n        <a\n            key={item.section}\n            href=\"#\"\n            className={`sidebar-item ${currentSection === item.section ? 'active' : ''}`}\n            onClick={(e) => {\n                e.preventDefault();\n                handleSectionClick(item.section);\n            }}\n        >\n            <i className={item.icon}></i>\n            <span>{item.label}</span>\n        </a>\n    );\n\n    const renderSidebarGroup = (group) => {\n        // Check if group has permission requirement\n        if (group.permission && !hasPermission(group.permission)) {\n            return null;\n        }\n\n        return (\n            <div key={group.group} className=\"sidebar-section\">\n                {group.group && <h6 className=\"sidebar-header\">{group.group}</h6>}\n                {group.items.map(item => {\n                    // Check individual item permissions\n                    if (item.permission && !hasPermission(item.permission)) {\n                        return null;\n                    }\n                    return renderSidebarItem(item);\n                })}\n            </div>\n        );\n    };\n\n    return (\n        <aside className={`admin-sidebar ${mobileSidebarOpen ? 'mobile-open' : ''}`}>\n            {sidebarItems.map(item => {\n                if (item.standalone) {\n                    return (\n                        <div key={item.section} className=\"sidebar-section\">\n                            {renderSidebarItem(item)}\n                        </div>\n                    );\n                }\n                return renderSidebarGroup(item);\n            })}\n        </aside>\n    );\n};\n\nexport default Sidebar;","/**\n * Affiliates Service - API Layer\n * Handles all CRUD operations for Affiliates entity\n * Follows standardized service interface\n */\nclass AffiliatesService {\n    constructor() {\n        this.baseUrl = '/api/admin/affiliates';\n    }\n\n    // ============================================================================\n    // REQUIRED METHODS (STANDARD INTERFACE)\n    // ============================================================================\n\n    /**\n     * Helper method to make API requests with proper error handling\n     * @param {string} endpoint - API endpoint \n     * @param {object} options - Request options\n     * @returns {Promise<object>} API response\n     */\n    async makeRequest(endpoint, options = {}) {\n        try {\n            const url = endpoint.startsWith('http') ? endpoint : `${this.baseUrl}${endpoint}`;\n            \n            const defaultOptions = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include' // Include cookies for JWT\n            };\n\n            const response = await fetch(url, { ...defaultOptions, ...options });\n            \n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({}));\n                throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Affiliates API Error:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Get affiliates list with pagination and filtering\n     * @param {object} params - Query parameters\n     * @returns {Promise<object>} Affiliates list with pagination\n     */\n    async get(params = {}) {\n        const queryParams = new URLSearchParams();\n        \n        // Standard pagination params\n        if (params.page) queryParams.append('page', params.page);\n        if (params.limit) queryParams.append('limit', params.limit);\n        if (params.search) queryParams.append('search', params.search);\n        \n        // Affiliates-specific filters\n        if (params.status) queryParams.append('status', params.status);\n        if (params.type) queryParams.append('type', params.type);\n\n        const endpoint = queryParams.toString() ? `?${queryParams.toString()}` : '';\n        return await this.makeRequest(endpoint);\n    }\n\n    /**\n     * Get single affiliate by ID\n     * @param {number} id - Affiliate ID\n     * @returns {Promise<object>} Affiliate data\n     */\n    async getById(id) {\n        return await this.makeRequest(`/${id}`);\n    }\n\n    /**\n     * Create new affiliate\n     * @param {object} data - Affiliate data\n     * @returns {Promise<object>} Created affiliate\n     */\n    async create(data) {\n        // Validate required fields\n        const validationErrors = this.validateAffiliateData(data);\n        if (Object.keys(validationErrors).length > 0) {\n            throw new Error(Object.values(validationErrors)[0]);\n        }\n\n        return await this.makeRequest('', {\n            method: 'POST',\n            body: JSON.stringify(data)\n        });\n    }\n\n    /**\n     * Update existing affiliate\n     * @param {number} id - Affiliate ID\n     * @param {object} data - Updated affiliate data\n     * @returns {Promise<object>} Updated affiliate\n     */\n    async update(id, data) {\n        // Validate required fields\n        const validationErrors = this.validateAffiliateData(data, true);\n        if (Object.keys(validationErrors).length > 0) {\n            throw new Error(Object.values(validationErrors)[0]);\n        }\n\n        return await this.makeRequest(`/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(data)\n        });\n    }\n\n    /**\n     * Delete affiliate\n     * @param {number} id - Affiliate ID\n     * @returns {Promise<object>} Deletion result\n     */\n    async delete(id) {\n        return await this.makeRequest(`/${id}`, {\n            method: 'DELETE'\n        });\n    }\n\n    // ============================================================================\n    // UTILITY METHODS\n    // ============================================================================\n\n    /**\n     * Validate affiliate data\n     * @param {object} data - Affiliate data to validate\n     * @param {boolean} isUpdate - Whether this is an update operation\n     * @returns {object} Validation errors\n     */\n    validateAffiliateData(data, isUpdate = false) {\n        const errors = {};\n\n        if (!data.name || !data.name.trim()) {\n            errors.name = 'Affiliate name is required';\n        }\n\n        if (!data.slug || !data.slug.trim()) {\n            errors.slug = 'Slug is required';\n        }\n\n        if (data.contact_email && !this.isValidEmail(data.contact_email)) {\n            errors.contact_email = 'Invalid email format';\n        }\n\n        return errors;\n    }\n\n    /**\n     * Get default affiliate data structure\n     * @returns {object} Default affiliate data\n     */\n    getDefaultAffiliateData() {\n        return {\n            name: '',\n            slug: '',\n            description: '',\n            contact_email: '',\n            contact_phone: '',\n            website_url: '',\n            status: 'active',\n            type: 'organization'\n        };\n    }\n\n    /**\n     * Format affiliate for display\n     * @param {object} affiliate - Affiliate object\n     * @returns {object} Formatted affiliate\n     */\n    formatAffiliateForDisplay(affiliate) {\n        return {\n            ...affiliate,\n            name_display: affiliate.name || 'Unnamed Affiliate',\n            type_display: this.getTypeDisplay(affiliate.type)\n        };\n    }\n\n    /**\n     * Format user for display\n     * @param {object} user - User object\n     * @returns {object} Formatted user\n     */\n    formatUserForDisplay(user) {\n        return {\n            ...user,\n            name: user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : user.email,\n            name_display: user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : user.email\n        };\n    }\n\n    /**\n     * Generate slug from name\n     * @param {string} name - Affiliate name\n     * @returns {string} Generated slug\n     */\n    generateSlug(name) {\n        return name\n            .toLowerCase()\n            .replace(/[^a-z0-9 -]/g, '')\n            .replace(/\\s+/g, '-')\n            .replace(/-+/g, '-')\n            .trim('-');\n    }\n\n    /**\n     * Get type display name\n     * @param {string} type - Affiliate type\n     * @returns {string} Display name\n     */\n    getTypeDisplay(type) {\n        const types = {\n            'organization': 'Organization',\n            'individual': 'Individual',\n            'partner': 'Partner',\n            'sponsor': 'Sponsor'\n        };\n        return types[type] || type;\n    }\n\n    /**\n     * Validate email format\n     * @param {string} email - Email to validate\n     * @returns {boolean} Is valid email\n     */\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    /**\n     * Get type options for select\n     * @returns {Array} Type options\n     */\n    getTypeOptions() {\n        return [\n            { value: 'organization', label: 'Organization' },\n            { value: 'individual', label: 'Individual' },\n            { value: 'partner', label: 'Partner' },\n            { value: 'sponsor', label: 'Sponsor' }\n        ];\n    }\n\n    /**\n     * Get status options for select\n     * @returns {Array} Status options\n     */\n    getStatusOptions() {\n        return [\n            { value: 'active', label: 'Active' },\n            { value: 'inactive', label: 'Inactive' }\n        ];\n    }\n\n    // ============================================================================\n    // MEMBER MANAGEMENT METHODS\n    // ============================================================================\n\n    /**\n     * Get affiliate members\n     * @param {number} affiliateId - Affiliate ID\n     * @returns {Promise<object>} Members list\n     */\n    async getMembers(affiliateId) {\n        return await this.makeRequest(`/${affiliateId}/members`);\n    }\n\n    /**\n     * Get available affiliates that can be added as members\n     * @param {number} affiliateId - Affiliate ID\n     * @returns {Promise<object>} Available affiliates\n     */\n    async getAvailableMembers(affiliateId) {\n        return await this.makeRequest(`/${affiliateId}/available-members`);\n    }\n\n    /**\n     * Add member to affiliate\n     * @param {number} affiliateId - Affiliate ID\n     * @param {number} toAffiliateId - Member affiliate ID\n     * @param {object} permissions - Member permissions\n     * @returns {Promise<object>} Add result\n     */\n    async addMember(affiliateId, toAffiliateId, permissions = {}) {\n        return await this.makeRequest(`/${affiliateId}/members`, {\n            method: 'POST',\n            body: JSON.stringify({\n                to_affiliate_id: toAffiliateId,\n                permissions: permissions\n            })\n        });\n    }\n\n    /**\n     * Update member permissions\n     * @param {number} affiliateId - Affiliate ID\n     * @param {number} memberId - Member affiliate ID\n     * @param {object} permissions - Updated permissions\n     * @returns {Promise<object>} Update result\n     */\n    async updateMemberPermissions(affiliateId, memberId, permissions) {\n        return await this.makeRequest(`/${affiliateId}/members/${memberId}`, {\n            method: 'PUT',\n            body: JSON.stringify({ permissions })\n        });\n    }\n\n    /**\n     * Remove member from affiliate\n     * @param {number} affiliateId - Affiliate ID\n     * @param {number} memberId - Member affiliate ID\n     * @returns {Promise<object>} Remove result\n     */\n    async removeMember(affiliateId, memberId) {\n        return await this.makeRequest(`/${affiliateId}/members/${memberId}`, {\n            method: 'DELETE'\n        });\n    }\n\n    /**\n     * Get permission options for checkboxes\n     * @returns {Array} Permission options\n     */\n    getPermissionOptions() {\n        return [\n            { \n                name: 'can_use', \n                label: 'B can use content from A',\n                description: 'Allow this affiliate to use content from the current affiliate'\n            },\n            { \n                name: 'can_copy', \n                label: 'B can copy content from A',\n                description: 'Allow this affiliate to copy content from the current affiliate'\n            },\n            { \n                name: 'can_assign', \n                label: 'B can assign content to A',\n                description: 'Allow this affiliate to assign content to the current affiliate'\n            },\n            { \n                name: 'access_publishers', \n                label: 'Access to A enabled for B\\'s publishers',\n                description: 'Allow this affiliate\\'s publishers to access the current affiliate'\n            }\n        ];\n    }\n\n    /**\n     * Get current user info\n     * @returns {Promise<object>} Current user data\n     */\n    async getCurrentUser() {\n        try {\n            const response = await fetch('/api/admin/affiliates/current-user', {\n                credentials: 'include'\n            });\n            \n            if (response.ok) {\n                const data = await response.json();\n                return data.success ? data.data : null;\n            }\n            \n            return null;\n        } catch (error) {\n            console.error('Error fetching current user:', error);\n            return null;\n        }\n    }\n\n\n}\n\nexport default new AffiliatesService(); ","/**\n * Utility functions for affiliate management\n * This ensures consistent affiliate ID handling across the application\n */\n\nlet currentAffiliateId = null;\n\n/**\n * Set the current affiliate ID (called from context)\n * @param {number} affiliateId - The affiliate ID to set\n */\nexport const setCurrentAffiliateId = (affiliateId) => {\n    currentAffiliateId = affiliateId;\n    // Also update localStorage for persistence\n    if (affiliateId) {\n        localStorage.setItem('currentAffiliateId', affiliateId.toString());\n    } else {\n        localStorage.removeItem('currentAffiliateId');\n    }\n};\n\n/**\n * Get the current affiliate ID (used by services)\n * @returns {number|null} The current affiliate ID\n */\nexport const getCurrentAffiliateId = () => {\n    // First try to get from memory (React context)\n    if (currentAffiliateId !== null) {\n        console.log('🔍 getCurrentAffiliateId: returning from memory:', currentAffiliateId);\n        return currentAffiliateId;\n    }\n    \n    // Fallback to localStorage (for initial load)\n    const stored = localStorage.getItem('currentAffiliateId');\n    console.log('🔍 getCurrentAffiliateId: stored in localStorage:', stored);\n    if (stored) {\n        const parsed = parseInt(stored);\n        if (!isNaN(parsed)) {\n            currentAffiliateId = parsed;\n            console.log('🔍 getCurrentAffiliateId: parsed and set:', parsed);\n            return parsed;\n        }\n    }\n    \n    console.log('🔍 getCurrentAffiliateId: returning null');\n    return null;\n};\n\n/**\n * Clear the current affiliate ID\n */\nexport const clearCurrentAffiliateId = () => {\n    currentAffiliateId = null;\n    localStorage.removeItem('currentAffiliateId');\n};\n","import React, { createContext, useContext, useState, useEffect } from 'react';\nimport affiliatesService from '../services/affiliatesService';\nimport { setCurrentAffiliateId, getCurrentAffiliateId } from '../utils/affiliateUtils';\n\n// Create context\nconst AffiliateContext = createContext();\n\n// Custom hook to use affiliate context\nexport const useAffiliate = () => {\n    const context = useContext(AffiliateContext);\n    if (!context) {\n        throw new Error('useAffiliate must be used within an AffiliateProvider');\n    }\n    return context;\n};\n\n// Provider component\nexport const AffiliateProvider = ({ children }) => {\n    const [currentAffiliate, setCurrentAffiliate] = useState(null);\n    const [userAffiliates, setUserAffiliates] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Load user's affiliates on mount\n    useEffect(() => {\n        loadUserAffiliates();\n    }, []);\n\n    const loadUserAffiliates = async () => {\n        try {\n            setLoading(true);\n            setError(null);\n\n            const response = await affiliatesService.get();\n            \n            if (response.success) {\n                setUserAffiliates(response.data);\n                \n                // Handle affiliate selection logic\n                await handleAffiliateSelection(response.data);\n            } else {\n                setError('Failed to load affiliates');\n                console.error('Error loading affiliates:', response.error);\n            }\n        } catch (error) {\n            console.error('Error loading user affiliates:', error);\n            setError('Failed to load affiliates');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleAffiliateSelection = async (affiliates) => {\n        if (affiliates.length === 0) {\n            console.log('No affiliates available for user');\n            setCurrentAffiliate(null);\n            return;\n        }\n\n        // Check if there's a stored affiliate ID\n        const storedAffiliateId = getCurrentAffiliateId();\n        console.log('Stored affiliate ID:', storedAffiliateId);\n        \n        let affiliateToUse = null;\n\n        if (storedAffiliateId) {\n            // Try to find the stored affiliate in the user's affiliates\n            affiliateToUse = affiliates.find(a => a.id == storedAffiliateId);\n            if (affiliateToUse) {\n                console.log('Using stored affiliate:', affiliateToUse.name);\n            } else {\n                console.log('Stored affiliate not found in user affiliates, will use first available');\n            }\n        }\n\n        // If no stored affiliate or stored affiliate not found, use the first one\n        if (!affiliateToUse) {\n            affiliateToUse = affiliates[0];\n            console.log('Using first available affiliate:', affiliateToUse.name);\n        }\n\n        // Set the affiliate\n        if (affiliateToUse) {\n            setCurrentAffiliate(affiliateToUse);\n            setCurrentAffiliateId(affiliateToUse.id);\n            console.log('Affiliate set to:', affiliateToUse.name, 'ID:', affiliateToUse.id);\n        }\n    };\n\n    const switchAffiliate = async (affiliateId) => {\n        try {\n            // Find affiliate in user's affiliates\n            const affiliate = userAffiliates.find(a => a.id === affiliateId);\n            if (affiliate) {\n                setCurrentAffiliate(affiliate);\n                setCurrentAffiliateId(affiliateId);\n                \n                // Trigger a refresh of all data that depends on affiliate context\n                // This will update any components that use affiliate-dependent data\n                window.dispatchEvent(new CustomEvent('affiliateChanged', { \n                    detail: { affiliateId } \n                }));\n                \n                console.log('Switched to affiliate:', affiliate.name);\n                return true;\n            }\n            \n            console.error('Affiliate not found in user affiliates:', affiliateId);\n            return false;\n        } catch (error) {\n            console.error('Error switching affiliate:', error);\n            setError('Failed to switch affiliate');\n            return false;\n        }\n    };\n\n    const refreshAffiliates = async () => {\n        await loadUserAffiliates();\n    };\n\n    const getCurrentAffiliateName = () => {\n        return currentAffiliate?.name || 'No Affiliate Selected';\n    };\n\n    const isAffiliateSelected = () => {\n        return !!currentAffiliate;\n    };\n\n    const value = {\n        currentAffiliate,\n        userAffiliates,\n        loading,\n        error,\n        switchAffiliate,\n        refreshAffiliates,\n        getCurrentAffiliateId: getCurrentAffiliateId,\n        getCurrentAffiliateName,\n        isAffiliateSelected\n    };\n\n    return (\n        <AffiliateContext.Provider value={value}>\n            {children}\n        </AffiliateContext.Provider>\n    );\n};\n\nexport default AffiliateContext; ","import React, { useState, useRef, useEffect } from 'react';\nimport { useAffiliate } from '../../contexts/AffiliateContext';\n//import logo from '../../assets/logo.svg';\nimport './navbar.css';\n\nconst Navbar = ({ \n    user, \n    onLogout, \n    onToggleMobileSidebar,\n    showMobileToggle = true \n}) => {\n    const [affiliateDropdownOpen, setAffiliateDropdownOpen] = useState(false);\n    const [userDropdownOpen, setUserDropdownOpen] = useState(false);\n    const affiliateDropdownRef = useRef(null);\n    const userDropdownRef = useRef(null);\n\n    const { \n        currentAffiliate, \n        userAffiliates, \n        switchAffiliate, \n        getCurrentAffiliateName,\n        isAffiliateSelected,\n        loading: affiliatesLoading \n    } = useAffiliate();\n\n    // Close dropdowns when clicking outside\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (affiliateDropdownRef.current && !affiliateDropdownRef.current.contains(event.target)) {\n                setAffiliateDropdownOpen(false);\n            }\n            if (userDropdownRef.current && !userDropdownRef.current.contains(event.target)) {\n                setUserDropdownOpen(false);\n            }\n        };\n\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n\n    const handleAffiliateChange = async (affiliateId) => {\n        const success = await switchAffiliate(affiliateId);\n        if (success) {\n            setAffiliateDropdownOpen(false); // Close dropdown after selection\n            console.log('Affiliate switched successfully');\n        } else {\n            console.error('Failed to switch affiliate');\n        }\n    };\n\n    const toggleAffiliateDropdown = () => {\n        setAffiliateDropdownOpen(!affiliateDropdownOpen);\n        setUserDropdownOpen(false); // Close other dropdown\n    };\n\n    const toggleUserDropdown = () => {\n        setUserDropdownOpen(!userDropdownOpen);\n        setAffiliateDropdownOpen(false); // Close other dropdown\n    };\n\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\n            <div className=\"container-fluid\">\n                {showMobileToggle && (\n                    <button \n                        className=\"btn btn-link d-lg-none text-white me-2\"\n                        onClick={onToggleMobileSidebar}\n                    >\n                        <i className=\"fas fa-bars\"></i>\n                    </button>\n                )}\n                \n                <span className=\"navbar-brand mb-0\">\n                    { currentAffiliate?.logo && <img src={currentAffiliate.logo} alt=\"Logo\" className=\"logo-img\" /> }\n                    Immergo Producer\n                </span>\n                \n                <div className=\"navbar-nav ms-auto\">\n                    {/* Affiliate Selector */}\n                    {affiliatesLoading ? (\n                        <div className=\"nav-item me-3\">\n                            <span className=\"nav-link\">\n                                <i className=\"fas fa-spinner fa-spin me-1\"></i>\n                                Loading...\n                            </span>\n                        </div>\n                    ) : userAffiliates.length > 0 ? (\n                        <div className=\"nav-item dropdown me-3\" ref={affiliateDropdownRef}>\n                            <button \n                                className=\"nav-link dropdown-toggle btn btn-link\"\n                                onClick={toggleAffiliateDropdown}\n                                style={{ border: 'none', background: 'none', color: 'inherit' }}\n                            >\n                                <i className=\"fas fa-globe me-1\"></i>\n                                {getCurrentAffiliateName()}\n                            </button>\n                            {affiliateDropdownOpen && (\n                                <ul className=\"dropdown-menu dropdown-menu-end show\" style={{ display: 'block' }}>\n                                    {userAffiliates.map(affiliate => (\n                                        <li key={affiliate.id}>\n                                            <button \n                                                className={`dropdown-item ${currentAffiliate?.id === affiliate.id ? 'active' : ''}`}\n                                                onClick={() => handleAffiliateChange(affiliate.id)}\n                                            >\n                                                <i className=\"fas fa-building me-2\"></i>\n                                                {affiliate.name}\n                                                {currentAffiliate?.id === affiliate.id && (\n                                                    <i className=\"fas fa-check ms-2\"></i>\n                                                )}\n                                            </button>\n                                        </li>\n                                    ))}\n                                    <li><hr className=\"dropdown-divider\" /></li>\n                                    <li>\n                                        <a className=\"dropdown-item\" href=\"/admin/affiliates\">\n                                            <i className=\"fas fa-cog me-2\"></i>\n                                            Manage Affiliates\n                                        </a>\n                                    </li>\n                                </ul>\n                            )}\n                        </div>\n                    ) : (\n                        <div className=\"nav-item me-3\">\n                            <span className=\"nav-link text-warning\">\n                                <i className=\"fas fa-exclamation-triangle me-1\"></i>\n                                No Affiliates Available\n                            </span>\n                        </div>\n                    )}\n\n                    {/* Visit Site Link */}\n                    <a className=\"nav-link me-3\" href=\"/\" target=\"_blank\">\n                        <i className=\"fas fa-external-link-alt me-1\"></i>\n                        Visit Site\n                    </a>\n\n                    {/* User Dropdown */}\n                    <div className=\"nav-item dropdown\" ref={userDropdownRef}>\n                        <button \n                            className=\"nav-link dropdown-toggle btn btn-link\"\n                            onClick={toggleUserDropdown}\n                            style={{ border: 'none', background: 'none', color: 'inherit' }}\n                        >\n                            <i className=\"fas fa-user-circle me-1\"></i>\n                            {user?.name || user?.email}\n                        </button>\n                        {userDropdownOpen && (\n                            <ul className=\"dropdown-menu dropdown-menu-end show\" style={{ display: 'block' }}>\n                                <li>\n                                    <a className=\"dropdown-item\" href=\"#\">\n                                        <i className=\"fas fa-user me-2\"></i>\n                                        Profile\n                                    </a>\n                                </li>\n                                <li>\n                                    <a className=\"dropdown-item\" href=\"#\">\n                                        <i className=\"fas fa-cog me-2\"></i>\n                                        Settings\n                                    </a>\n                                </li>\n                                <li><hr className=\"dropdown-divider\" /></li>\n                                <li>\n                                    <button className=\"dropdown-item\" onClick={onLogout}>\n                                        <i className=\"fas fa-sign-out-alt me-2\"></i>\n                                        Logout\n                                    </button>\n                                </li>\n                            </ul>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nexport default Navbar; ","import { useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\nimport './editorjs.css';\n\nconst EditorJs = forwardRef(({\n    data = { blocks: [] },\n    placeholder = 'Start creating your content...',\n    onChange = null,\n    onReady = null,\n    customTools = {},\n    readOnly = false,\n    className = ''\n}, ref) => {\n    const editorRef = useRef(null);\n    const holderRef = useRef(null);\n    const holderId = useRef(`editor-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);\n    const isInitializing = useRef(false);\n\n    // Expose editor instance methods to parent component\n    useImperativeHandle(ref, () => ({\n        save: async () => {\n            if (editorRef.current) {\n                try {\n                    return await editorRef.current.save();\n                } catch (error) {\n                    console.error('Error saving editor data:', error);\n                    throw error;\n                }\n            }\n            return { blocks: [] };\n        },\n        \n        clear: async () => {\n            if (editorRef.current) {\n                try {\n                    await editorRef.current.clear();\n                } catch (error) {\n                    console.error('Error clearing editor:', error);\n                }\n            }\n        },\n        \n        render: async (data) => {\n            if (editorRef.current) {\n                try {\n                    await editorRef.current.render(data);\n                } catch (error) {\n                    console.error('Error rendering editor data:', error);\n                }\n            }\n        },\n        \n        destroy: async () => {\n            if (editorRef.current) {\n                try {\n                    await editorRef.current.destroy();\n                    editorRef.current = null;\n                } catch (error) {\n                    console.error('Error destroying editor:', error);\n                }\n            }\n        },\n        \n        focus: () => {\n            if (editorRef.current) {\n                try {\n                    editorRef.current.focus();\n                } catch (error) {\n                    console.error('Error focusing editor:', error);\n                }\n            }\n        },\n        \n        getEditor: () => editorRef.current\n    }));\n\n    // Check if Editor.js dependencies are available\n    const checkDependencies = () => {\n        // Core Editor.js dependencies\n        const coreGlobals = [\n            'EditorJS',\n            'Header', \n            'Paragraph',\n            'List',\n            'Quote',\n            'Table',\n            'Delimiter',\n            'ImageTool'\n        ];\n\n        // Custom tools\n        const customGlobals = [\n            'ColumnsBlock',\n            'AdvUnitBlock'\n        ];\n\n        // Optional tools\n        const optionalGlobals = [\n            'StoriesReelBlock',\n            'TextAlign'\n        ];\n\n        const missingCore = coreGlobals.filter(dep => typeof window[dep] === 'undefined');\n        const missingCustom = customGlobals.filter(dep => typeof window[dep] === 'undefined');\n        const missingOptional = optionalGlobals.filter(dep => typeof window[dep] === 'undefined');\n        \n        // Check if createEditor function is available\n        const hasCreateEditor = typeof window.createEditor === 'function';\n\n        // Debug logging\n        console.log('🔍 Editor.js Dependencies Check:');\n        console.log('  Core tools available:', coreGlobals.filter(dep => typeof window[dep] !== 'undefined'));\n        console.log('  Custom tools available:', customGlobals.filter(dep => typeof window[dep] !== 'undefined'));\n        console.log('  Optional tools available:', optionalGlobals.filter(dep => typeof window[dep] !== 'undefined'));\n        \n        if (missingCore.length > 0) {\n            console.warn('  ❌ Missing core tools:', missingCore);\n        }\n        if (missingCustom.length > 0) {\n            console.warn('  ⚠️ Missing custom tools:', missingCustom);\n        }\n        if (missingOptional.length > 0) {\n            console.info('  📝 Missing optional tools:', missingOptional);\n        }\n        \n        console.log('  createEditor function:', hasCreateEditor ? '✅ Available' : '❌ Missing');\n\n        // Check if we have window.mainEditorTools (from editorConfig.js)\n        const hasMainTools = typeof window.mainEditorTools === 'object';\n        console.log('  mainEditorTools:', hasMainTools ? '✅ Available' : '❌ Missing');\n        \n        if (hasMainTools) {\n            console.log('  Available tools in mainEditorTools:', Object.keys(window.mainEditorTools));\n        }\n\n        return {\n            hasAllCore: missingCore.length === 0,\n            hasCustomTools: missingCustom.length === 0,\n            hasCreateEditor,\n            missingCore,\n            missingCustom,\n            missingOptional,\n            ready: missingCore.length === 0 && hasCreateEditor\n        };\n    };\n\n    // Initialize Editor.js\n    useEffect(() => {\n        const initializeEditor = async () => {\n            // Prevent multiple initializations\n            if (isInitializing.current) {\n                return;\n            }\n\n            // Make sure the holder element exists\n            if (!holderRef.current) {\n                console.warn('Editor holder element not found');\n                return;\n            }\n\n            isInitializing.current = true;\n\n            try {\n                // Wait for Editor.js dependencies to be loaded\n                const maxWaitTime = 15000; // 15 seconds\n                const checkInterval = 300; // 300ms\n                let waited = 0;\n\n                const waitForDependencies = () => {\n                    return new Promise((resolve, reject) => {\n                        const check = () => {\n                            const deps = checkDependencies();\n                            \n                            if (deps.ready) {\n                                console.log('✅ All required Editor.js dependencies loaded');\n                                if (!deps.hasCustomTools) {\n                                    console.warn('⚠️ Some custom tools missing, but proceeding with available tools');\n                                }\n                                resolve(deps);\n                                return;\n                            }\n\n                            waited += checkInterval;\n                            if (waited >= maxWaitTime) {\n                                reject(new Error(`Editor.js dependencies not loaded within timeout.\\nMissing core: ${deps.missingCore.join(', ')}\\nMissing custom: ${deps.missingCustom.join(', ')}`));\n                                return;\n                            }\n\n                            // Log progress every 3 seconds\n                            if (waited % 3000 === 0) {\n                                console.log(`⏳ Waiting for Editor.js dependencies... (${waited/1000}s)`);\n                            }\n\n                            setTimeout(check, checkInterval);\n                        };\n                        check();\n                    });\n                };\n\n                const deps = await waitForDependencies();\n\n                // Destroy existing editor if it exists\n                if (editorRef.current) {\n                    try {\n                        await editorRef.current.destroy();\n                    } catch (error) {\n                        console.warn('Error destroying previous editor:', error);\n                    }\n                    editorRef.current = null;\n                }\n\n                // Parse data if it's a string\n                let parsedData = data;\n                if (typeof data === 'string') {\n                    try {\n                        parsedData = JSON.parse(data);\n                    } catch (error) {\n                        console.warn('Invalid JSON data provided, using empty blocks:', error);\n                        parsedData = { blocks: [] };\n                    }\n                }\n\n                // Ensure data has the correct structure\n                if (!parsedData || typeof parsedData !== 'object') {\n                    parsedData = { blocks: [] };\n                }\n                if (!Array.isArray(parsedData.blocks)) {\n                    parsedData.blocks = [];\n                }\n\n                console.log('🔧 Creating Editor.js instance with data:', parsedData);\n\n                // Use the global createEditor function from editorConfig.js\n                const createEditorFn = window.createEditor;\n                \n                if (!createEditorFn) {\n                    throw new Error('createEditor function not available');\n                }\n\n                editorRef.current = createEditorFn({\n                    holder: holderId.current,\n                    placeholder: placeholder,\n                    data: parsedData,\n                    readOnly: readOnly,\n                    customTools: customTools,\n                    onChange: onChange ? () => {\n                        if (editorRef.current && onChange) {\n                            // Debounce onChange to avoid too many calls\n                            setTimeout(() => {\n                                onChange();\n                            }, 100);\n                        }\n                    } : undefined\n                });\n\n                // Log available tools\n                if (editorRef.current && editorRef.current.configuration) {\n                    console.log('🛠️ Editor initialized with tools:', Object.keys(editorRef.current.configuration.tools || {}));\n                }\n\n                // Call onReady callback if provided\n                if (onReady && editorRef.current) {\n                    // Wait a bit for editor to be fully initialized\n                    setTimeout(() => {\n                        onReady(editorRef.current);\n                    }, 300);\n                }\n\n                console.log('✅ EditorJs component initialized successfully');\n\n            } catch (error) {\n                console.error('Failed to initialize EditorJs:', error);\n                \n                // Show error message in the editor container\n                if (holderRef.current) {\n                    holderRef.current.innerHTML = `\n                        <div class=\"editor-error\">\n                            <div class=\"editor-error-icon\">⚠️</div>\n                            <div class=\"editor-error-title\">Editor Loading Error</div>\n                            <div class=\"editor-error-message\">\n                                Editor.js failed to initialize. Please ensure all Editor.js dependencies are loaded.\n                            </div>\n                            <div class=\"editor-error-details\">${error.message}</div>\n                            <button class=\"btn btn-sm btn-primary mt-2\" onclick=\"window.location.reload()\">\n                                Reload Page\n                            </button>\n                        </div>\n                    `;\n                }\n            } finally {\n                isInitializing.current = false;\n            }\n        };\n\n        // Small delay to ensure DOM is ready\n        const timeoutId = setTimeout(initializeEditor, 500);\n\n        return () => {\n            clearTimeout(timeoutId);\n        };\n    }, []); // Empty dependency array - we'll handle updates manually\n\n    // Handle data updates\n    useEffect(() => {\n        if (editorRef.current && data && !isInitializing.current) {\n            // Only re-render if the data is significantly different\n            const updateEditor = async () => {\n                try {\n                    let parsedData = data;\n                    if (typeof data === 'string') {\n                        parsedData = JSON.parse(data);\n                    }\n                    \n                    if (parsedData && parsedData.blocks) {\n                        // Get current data to compare\n                        const currentData = await editorRef.current.save();\n                        const currentBlocks = JSON.stringify(currentData.blocks);\n                        const newBlocks = JSON.stringify(parsedData.blocks);\n                        \n                        // Only update if data is different\n                        if (currentBlocks !== newBlocks) {\n                            await editorRef.current.render(parsedData);\n                        }\n                    }\n                } catch (error) {\n                    console.warn('Error updating editor data:', error);\n                }\n            };\n\n            // Debounce the update\n            const timeoutId = setTimeout(updateEditor, 500);\n            return () => clearTimeout(timeoutId);\n        }\n    }, [data]);\n\n    // Cleanup on unmount\n    useEffect(() => {\n        return () => {\n            if (editorRef.current) {\n                try {\n                    editorRef.current.destroy();\n                } catch (error) {\n                    console.warn('Error destroying editor on unmount:', error);\n                }\n                editorRef.current = null;\n            }\n        };\n    }, []);\n\n    return (\n        <div className={`editorjs-wrapper ${className}`}>\n            <div \n                ref={holderRef}\n                id={holderId.current}\n                className=\"editorjs-holder\"\n            />\n        </div>\n    );\n});\n\nEditorJs.displayName = 'EditorJs';\n\nexport default EditorJs; ","import React from 'react';\nimport './skeletonField.css';\n\nconst SkeletonField = ({ type = 'text', label = true, helpText = false, rows = 3 }) => {\n    const renderSkeleton = () => {\n        switch (type) {\n            case 'text':\n            case 'email':\n            case 'url':\n            case 'number':\n                return (\n                    <div className=\"skeleton-input skeleton-animate\"></div>\n                );\n            \n            case 'textarea':\n                return (\n                    <div \n                        className=\"skeleton-textarea skeleton-animate\" \n                        style={{ height: `${rows * 24}px` }}\n                    ></div>\n                );\n            \n            case 'select':\n                return (\n                    <div className=\"skeleton-select skeleton-animate\"></div>\n                );\n            \n            case 'checkbox':\n                return (\n                    <div className=\"skeleton-checkbox skeleton-animate\"></div>\n                );\n            \n            case 'color':\n                return (\n                    <div className=\"skeleton-color skeleton-animate\"></div>\n                );\n            \n            case 'editor':\n                return (\n                    <div className=\"skeleton-editor skeleton-animate\">\n                        <div className=\"skeleton-editor-toolbar\">\n                            <div className=\"skeleton-tool skeleton-animate\"></div>\n                            <div className=\"skeleton-tool skeleton-animate\"></div>\n                            <div className=\"skeleton-tool skeleton-animate\"></div>\n                        </div>\n                        <div className=\"skeleton-editor-content skeleton-animate\"></div>\n                    </div>\n                );\n            \n            case 'custom':\n                return (\n                    <div className=\"skeleton-custom skeleton-animate\"></div>\n                );\n            \n            default:\n                return (\n                    <div className=\"skeleton-input skeleton-animate\"></div>\n                );\n        }\n    };\n\n    return (\n        <div className=\"skeleton-field mb-3\">\n            {label && (\n                <div className=\"skeleton-label skeleton-animate\"></div>\n            )}\n            {renderSkeleton()}\n            {helpText && (\n                <div className=\"skeleton-help-text skeleton-animate\"></div>\n            )}\n        </div>\n    );\n};\n\nexport default SkeletonField;\n","import { useState, useEffect, useRef } from 'react';\nimport EditorJs from '../EditorJs';\nimport SkeletonField from '../SkeletonField';\nimport './dynamicPage.css';\n\nconst DynamicPage = ({\n    show = false,\n    title = \"Edit Item\",\n    config = {},\n    entityData = null,\n    onSave = null,\n    onCancel = null,\n    loading = false\n}) => {\n    const [formData, setFormData] = useState({});\n    const [errors, setErrors] = useState({});\n    const [saving, setSaving] = useState(false);\n    const editorRef = useRef(null);\n\n    // Extract configuration\n    const {\n        fields = [],\n        entityType = 'entity',\n        editorConfig = null,\n        customValidation = null\n    } = config;\n\n    // Initialize form data\n    useEffect(() => {\n        if (entityData) {\n            setFormData({ ...entityData });\n        } else {\n            // Initialize with default values from field configuration\n            const defaultData = {};\n            fields.forEach(field => {\n                defaultData[field.name] = field.defaultValue || '';\n            });\n            setFormData(defaultData);\n        }\n        setErrors({});\n    }, [entityData, fields]);\n\n    // Check if has content field for Editor.js\n    const hasContentField = () => {\n        return fields.some(field => field.type === 'editor');\n    };\n\n    // Handle Editor.js onChange\n    const handleEditorChange = async () => {\n        if (editorRef.current) {\n            try {\n                const outputData = await editorRef.current.save();\n                setFormData(prev => ({\n                    ...prev,\n                    content: outputData\n                }));\n            } catch (error) {\n                console.error('Error saving editor data:', error);\n            }\n        }\n    };\n\n    const handleInputChange = (fieldName, value) => {\n        setFormData(prev => ({\n            ...prev,\n            [fieldName]: value\n        }));\n\n        // Auto-generate slug from title if needed\n        if (fieldName === 'title' && !formData.slug && fields.find(f => f.name === 'slug')) {\n            const slug = generateSlug(value);\n            setFormData(prev => ({\n                ...prev,\n                [fieldName]: value,\n                slug: slug\n            }));\n        }\n\n        // Clear error for this field\n        if (errors[fieldName]) {\n            setErrors(prev => {\n                const newErrors = { ...prev };\n                delete newErrors[fieldName];\n                return newErrors;\n            });\n        }\n    };\n\n    const generateSlug = (title) => {\n        return title\n            .toLowerCase()\n            .trim()\n            .replace(/[^\\w\\s-]/g, '')\n            .replace(/[\\s_-]+/g, '-')\n            .replace(/^-+|-+$/g, '');\n    };\n\n    const validateForm = () => {\n        const newErrors = {};\n\n        // Run built-in validations\n        fields.forEach(field => {\n            const value = formData[field.name];\n\n            if (field.required && (!value || value.toString().trim() === '')) {\n                newErrors[field.name] = `${field.label} is required`;\n            }\n\n            if (field.validation) {\n                const validationResult = field.validation(value, formData);\n                if (validationResult !== true) {\n                    newErrors[field.name] = validationResult;\n                }\n            }\n        });\n\n        // Run custom validation if provided\n        if (customValidation) {\n            const customErrors = customValidation(formData);\n            Object.assign(newErrors, customErrors);\n        }\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSave = async () => {\n        if (!validateForm()) {\n            return;\n        }\n\n        setSaving(true);\n\n        try {\n            // Sync editor data if needed\n            if (editorRef.current && hasContentField()) {\n                const outputData = await editorRef.current.save();\n                formData.content = outputData;\n            }\n\n            // Apply onBeforeSave if available\n            let dataToSave = formData;\n            if (config.onBeforeSave) {\n                dataToSave = config.onBeforeSave(formData);\n            }\n\n            if (onSave) {\n                await onSave(dataToSave);\n            } else {\n                console.error('DynamicPage: No onSave function provided');\n            }\n        } catch (error) {\n            console.error('DynamicPage: Save failed:', error);\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    const handleCancel = () => {\n        if (onCancel) {\n            onCancel();\n        }\n    };\n\n    // 100% Configurable panels system - completely agnostic\n    const panels = config.panels || {};\n    \n    // Initialize grouped fields dynamically based on configured panels only\n    const groupedFields = {};\n    Object.keys(panels).forEach(panelKey => {\n        groupedFields[panelKey] = [];\n    });\n\n    // Group fields based on their panel property - NO fallback logic\n    fields.forEach(field => {\n        // Only use field.panel if specified and panel exists in config\n        if (field.panel && panels[field.panel]) {\n            groupedFields[field.panel].push(field);\n        }\n        // Alternative: Use field.group as alias for panel\n        else if (field.group && panels[field.group]) {\n            groupedFields[field.group].push(field);\n        }\n        // NO fallback - if no panel specified, field is not grouped\n        // This ensures 100% explicit configuration\n    });\n\n    const renderField = (field) => {\n        const value = formData[field.name] || '';\n        const hasError = errors[field.name];\n        \n        // Show skeleton if entity is loading\n        if (formData._isLoading) {\n            return (\n                <SkeletonField \n                    key={field.name}\n                    type={field.type} \n                    label={true} \n                    helpText={field.helpText}\n                    rows={field.rows}\n                />\n            );\n        }\n\n        switch (field.type) {\n            case 'text':\n            case 'email':\n            case 'url':\n                return (\n                    <input\n                        type={field.type}\n                        className={`form-control ${hasError ? 'is-invalid' : ''}`}\n                        value={value}\n                        placeholder={field.placeholder}\n                        onChange={(e) => handleInputChange(field.name, e.target.value)}\n                    />\n                );\n\n            case 'textarea':\n                return (\n                    <textarea\n                        className={`form-control ${hasError ? 'is-invalid' : ''}`}\n                        rows={field.rows || 3}\n                        value={value}\n                        placeholder={field.placeholder}\n                        onChange={(e) => handleInputChange(field.name, e.target.value)}\n                        style={field.name === 'custom_css' ? { fontFamily: 'monospace', fontSize: '12px' } : {}}\n                    />\n                );\n\n            case 'select':\n                return (\n                    <select\n                        className={`form-select ${hasError ? 'is-invalid' : ''}`}\n                        value={value}\n                        onChange={(e) => handleInputChange(field.name, e.target.value)}\n                    >\n                        <option value=\"\">{field.placeholder || 'Select...'}</option>\n                        {field.options?.map(option => (\n                            <option key={option.value} value={option.value}>\n                                {option.label}\n                            </option>\n                        ))}\n                    </select>\n                );\n\n            case 'checkbox':\n                return (\n                    <div className=\"form-check\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-check-input\"\n                            checked={!!value}\n                            onChange={(e) => handleInputChange(field.name, e.target.checked)}\n                        />\n                        <label className=\"form-check-label\">\n                            {field.checkboxLabel || field.label}\n                        </label>\n                    </div>\n                );\n\n            case 'editor':\n                // Parse content if it's a string\n                let editorData = value;\n                if (typeof value === 'string' && value) {\n                    try {\n                        editorData = JSON.parse(value);\n                    } catch (e) {\n                        editorData = { blocks: [] };\n                    }\n                }\n                if (!editorData || typeof editorData !== 'object') {\n                    editorData = { blocks: [] };\n                }\n\n                return (\n                    <div className=\"editor-field\">\n                        <EditorJs\n                            ref={editorRef}\n                            data={editorData}\n                            placeholder={editorConfig?.placeholder || 'Start writing...'}\n                            onChange={handleEditorChange}\n                            customTools={editorConfig?.tools || {}}\n                            className=\"dynamic-page-editor\"\n                        />\n                    </div>\n                );\n\n            case 'custom':\n                return field.render ? field.render(value, (newValue) => handleInputChange(field.name, newValue), formData) : null;\n\n            default:\n                return (\n                    <input\n                        type=\"text\"\n                        className={`form-control ${hasError ? 'is-invalid' : ''}`}\n                        value={value}\n                        placeholder={field.placeholder}\n                        onChange={(e) => handleInputChange(field.name, e.target.value)}\n                    />\n                );\n        }\n    };\n\n    const renderSidebarPanel = (title, fields, show = true, panelKey = null) => {\n        if (!show || fields.length === 0) return null;\n\n        return (\n            <div key={panelKey || title} className=\"panel-section\">\n                <h6 className=\"panel-title\">{title.toUpperCase()}</h6>\n                {fields.map(field => (\n                    <div key={field.name} className=\"form-group mb-3\">\n                        {field.type !== 'checkbox' && (\n                            <label className=\"form-label\">{field.label}</label>\n                        )}\n                        {renderField(field)}\n                        {field.helpText && (\n                            <small className=\"form-text text-muted mt-1\">{field.helpText}</small>\n                        )}\n                        {errors[field.name] && (\n                            <div className=\"invalid-feedback d-block\">\n                                {errors[field.name]}\n                            </div>\n                        )}\n                        {field.help && (\n                            <div className=\"form-text\">\n                                {field.help}\n                            </div>\n                        )}\n                    </div>\n                ))}\n            </div>\n        );\n    };\n\n    if (!show) return null;\n\n    return (\n        <div className=\"page-editor-container\">\n            {/* Editor Header */}\n            <div className=\"editor-header\">\n                <div className=\"editor-header-left\">\n                    <button className=\"btn btn-link editor-back-btn\" onClick={handleCancel}>\n                        <i className=\"fas fa-chevron-left me-2\"></i>BACK\n                    </button>\n                    <h1 className=\"editor-title\">\n                        {entityData ? `Edit ${entityType}` : `Create New ${entityType}`}\n                    </h1>\n                </div>\n                \n                <div className=\"editor-header-right\">\n                    {/* Status selector if exists */}\n                    {fields.find(f => f.name === 'status') && (\n                        <select \n                            className=\"form-select me-2\" \n                            style={{ width: 'auto' }}\n                            value={formData.status || 'draft'}\n                            onChange={(e) => handleInputChange('status', e.target.value)}\n                        >\n                            <option value=\"draft\">Draft</option>\n                            <option value=\"published\">Published</option>\n                        </select>\n                    )}\n                    <button \n                        className=\"btn btn-primary\" \n                        onClick={handleSave}\n                        disabled={saving}\n                    >\n                        {saving ? (\n                            <>\n                                <span className=\"spinner-border spinner-border-sm me-1\" role=\"status\"></span>\n                                SAVING...\n                            </>\n                        ) : (\n                            <>\n                                <i className=\"fas fa-save me-1\"></i>SAVE\n                            </>\n                        )}\n                    </button>\n                </div>\n            </div>\n\n            {/* Editor Layout */}\n            <div className=\"editor-layout\">\n                {/* Main Editor Area */}\n                <div className=\"editor-main\">\n                    {loading ? (\n                        <div className=\"text-center py-5\">\n                            <div className=\"spinner-border\" role=\"status\">\n                                <span className=\"visually-hidden\">Loading...</span>\n                            </div>\n                        </div>\n                    ) : (\n                        <>\n                            {/* Dynamic Main Area Fields */}\n                            {Object.keys(panels).map(panelKey => {\n                                const panel = panels[panelKey];\n                                if (!panel.showInMain || !groupedFields[panelKey] || groupedFields[panelKey].length === 0) {\n                                    return null;\n                                }\n\n                                return (\n                                    <div key={panelKey} className=\"main-panel-section\">\n                                        {groupedFields[panelKey].map(field => (\n                                            <div key={field.name} className=\"main-field mb-4\">\n                                                {/* Special styling for title field */}\n                                                {field.name === 'title' || field.type === 'title' ? (\n                                                    <div className=\"page-title-section p-4\">\n                                    <input \n                                        type=\"text\" \n                                        className=\"form-control form-control-lg border-0 p-0\" \n                                                            placeholder={field.placeholder || \"Enter title...\"}\n                                                            value={formData[field.name] || ''}\n                                                            onChange={(e) => handleInputChange(field.name, e.target.value)}\n                                        style={{ fontSize: '2.5rem', fontWeight: 'bold' }}\n                                    />\n                                                        {errors[field.name] && (\n                                                            <div className=\"invalid-feedback d-block\">\n                                                                {errors[field.name]}\n                                </div>\n                            )}\n                                                    </div>\n                                                ) : field.type === 'editor' ? (\n                                <div className=\"page-content-section\">\n                                                        {renderField(field)}\n                                                    </div>\n                                                ) : (\n                                                    <div className=\"p-4\">\n                                                        {field.type !== 'custom' && (\n                                                            <label className=\"form-label fw-bold mb-2\">{field.label}</label>\n                                                        )}\n                                                        {renderField(field)}\n                                                        {field.helpText && (\n                                                            <small className=\"form-text text-muted mt-1\">{field.helpText}</small>\n                                                        )}\n                                                        {errors[field.name] && (\n                                                            <div className=\"invalid-feedback d-block\">\n                                                                {errors[field.name]}\n                                                            </div>\n                                                        )}\n                                </div>\n                            )}\n                                            </div>\n                                        ))}\n                                    </div>\n                                );\n                            })}\n                        </>\n                    )}\n                </div>\n\n                {/* Right Sidebar */}\n                <div className=\"editor-sidebar\">\n                    <div className=\"sidebar-panel\">\n                        {/* Dynamic Sidebar Panels */}\n                        {Object.keys(panels).map(panelKey => {\n                            const panel = panels[panelKey];\n                            if (!panel.showInSidebar || !groupedFields[panelKey] || groupedFields[panelKey].length === 0) {\n                                return null;\n                            }\n\n                            return renderSidebarPanel(panel.title, groupedFields[panelKey], true, panelKey);\n                        })}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DynamicPage; ","/**\n * DynamicModal Component\n * Generic modal component for simple entity editing\n * Used for entities with few fields that don't require complex layouts\n */\nimport { useState, useEffect } from 'react';\nimport SkeletonField from '../SkeletonField';\nimport './dynamicModal.css';\n\nconst DynamicModal = ({ \n    isOpen = false, \n    onClose, \n    onSave, \n    data = null, \n    config = {}, \n    loading = false,\n    modalWidth = 'modal-lg' // Default to Bootstrap's modal-lg\n}) => {\n    const [formData, setFormData] = useState({});\n    const [errors, setErrors] = useState({});\n    const [saving, setSaving] = useState(false);\n\n    // Initialize form data when modal opens or data changes\n    useEffect(() => {\n        if (isOpen) {\n            if (data) {\n                // Editing existing entity\n                setFormData({ ...data });\n            } else {\n                // Creating new entity - use default values\n                let defaultData = {};\n                \n                if (config.getDefaultData) {\n                    // Use custom default data function\n                    defaultData = config.getDefaultData();\n                } else {\n                    // Use field-based default values\n                    config.fields?.forEach(field => {\n                        defaultData[field.name] = field.defaultValue || getDefaultValueForType(field.type);\n                    });\n                }\n                \n                setFormData(defaultData);\n            }\n            setErrors({});\n        }\n    }, [isOpen, data, config.fields, config.getDefaultData]);\n\n    // Get default value based on field type\n    const getDefaultValueForType = (type) => {\n        switch (type) {\n            case 'checkbox': return false;\n            case 'number': return 0;\n            case 'color': return '#007cba';\n            default: return '';\n        }\n    };\n\n    // Handle form field changes\n    const handleFieldChange = (fieldName, value) => {\n        setFormData(prev => ({\n            ...prev,\n            [fieldName]: value\n        }));\n\n        // Clear error for this field\n        if (errors[fieldName]) {\n            setErrors(prev => ({\n                ...prev,\n                [fieldName]: undefined\n            }));\n        }\n    };\n\n    // Validate form data\n    const validateForm = () => {\n        const newErrors = {};\n\n        config.fields?.forEach(field => {\n            if (field.required) {\n                const value = formData[field.name];\n                if (!value || (typeof value === 'string' && value.trim() === '')) {\n                    newErrors[field.name] = `${field.label} is required`;\n                }\n            }\n        });\n\n        // Custom validation\n        if (config.customValidation) {\n            const customErrors = config.customValidation(formData);\n            Object.assign(newErrors, customErrors);\n        }\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    // Handle form submission\n    const handleSave = async () => {\n        if (!validateForm()) return;\n\n        setSaving(true);\n        try {\n            await onSave(formData, data?.id);\n            onClose();\n        } catch (error) {\n            console.error('Error saving entity:', error);\n            setErrors({ general: error.message || 'Failed to save entity' });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    // Handle modal close\n    const handleClose = () => {\n        if (!saving) {\n            onClose();\n        }\n    };\n\n    // Render form field based on type\n    const renderField = (field) => {\n        const { name, label, type, required, placeholder, helpText, options, rows } = field;\n        const value = formData[name] || '';\n        const hasError = errors[name];\n        \n        // Show skeleton if entity is loading\n        if (formData._isLoading) {\n            return (\n                <SkeletonField \n                    key={name}\n                    type={type} \n                    label={true} \n                    helpText={helpText}\n                    rows={rows}\n                />\n            );\n        }\n\n        const commonProps = {\n            id: name,\n            name: name,\n            value: value,\n            onChange: (e) => handleFieldChange(name, e.target.value),\n            className: `form-control ${hasError ? 'is-invalid' : ''}`,\n            required: required\n        };\n\n        let fieldElement;\n\n        switch (type) {\n            case 'text':\n            case 'email':\n            case 'url':\n                fieldElement = (\n                    <input \n                        type={type} \n                        placeholder={placeholder}\n                        {...commonProps}\n                    />\n                );\n                break;\n\n            case 'textarea':\n                fieldElement = (\n                    <textarea \n                        rows={rows || 3}\n                        placeholder={placeholder}\n                        {...commonProps}\n                    />\n                );\n                break;\n\n            case 'select':\n                fieldElement = (\n                    <select {...commonProps}>\n                        {placeholder && <option value=\"\">{placeholder}</option>}\n                        {options?.map(option => (\n                            <option key={option.value} value={option.value}>\n                                {option.label}\n                            </option>\n                        ))}\n                    </select>\n                );\n                break;\n\n            case 'color':\n                fieldElement = (\n                    <input \n                        type=\"color\" \n                        {...commonProps}\n                        className={`form-control form-control-color ${hasError ? 'is-invalid' : ''}`}\n                    />\n                );\n                break;\n\n            case 'checkbox':\n                fieldElement = (\n                    <div className=\"form-check\">\n                        <input \n                            type=\"checkbox\" \n                            id={name}\n                            name={name}\n                            checked={value || false}\n                            onChange={(e) => handleFieldChange(name, e.target.checked)}\n                            className={`form-check-input ${hasError ? 'is-invalid' : ''}`}\n                            required={required}\n                        />\n                        <label className=\"form-check-label\" htmlFor={name}>\n                            {field.checkboxLabel || label}\n                        </label>\n                    </div>\n                );\n                break;\n\n            case 'number':\n                fieldElement = (\n                    <input \n                        type=\"number\" \n                        placeholder={placeholder}\n                        {...commonProps}\n                        onChange={(e) => handleFieldChange(name, parseFloat(e.target.value) || 0)}\n                    />\n                );\n                break;\n\n            case 'custom':\n                if (field.render) {\n                    fieldElement = field.render(value, (newValue) => handleFieldChange(name, newValue), formData);\n                } else {\n                    fieldElement = <p className=\"text-muted\">Custom field render function not provided</p>;\n                }\n                break;\n\n            case 'relation':\n                fieldElement = <p className=\"text-muted\">Relation fields are not supported in this version</p>;\n                break;\n\n            default:\n                fieldElement = <p className=\"text-muted\">Unknown field type: {type}</p>;\n                break;\n        }\n\n        return (\n            <div className=\"mb-3\" key={name}>\n                {type !== 'checkbox' && (\n                    <label htmlFor={name} className=\"form-label\">\n                        {label} {required && <span className=\"text-danger\">*</span>}\n                    </label>\n                )}\n                {fieldElement}\n                {helpText && <div className=\"form-text\">{helpText}</div>}\n                {hasError && <div className=\"invalid-feedback d-block\">{hasError}</div>}\n            </div>\n        );\n    };\n\n    // Don't render if not open\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal d-block\" style={{ backgroundColor: 'rgba(0, 0, 0, 0.5)' }}>\n            <div className={`modal-dialog ${modalWidth}`}>\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\">\n                            {config.title || (data ? 'Edit Entity' : 'Create Entity')}\n                        </h5>\n                        <button \n                            type=\"button\" \n                            className=\"btn-close\" \n                            onClick={handleClose}\n                            disabled={saving}\n                        ></button>\n                    </div>\n                    \n                    <div className=\"modal-body\">\n                        {errors.general && (\n                            <div className=\"alert alert-danger\">\n                                <i className=\"fas fa-exclamation-triangle me-2\"></i>\n                                {errors.general}\n                            </div>\n                        )}\n\n                        <form onSubmit={(e) => { e.preventDefault(); handleSave(); }}>\n                            {config.fields?.map(field => renderField(field))}\n                            \n                            {/* Custom render section */}\n                            {config.customRender && (\n                                <div className=\"mt-4\">\n                                    {(() => {\n                                        console.log('🔍 DynamicModal calling customRender:', { hasData: !!data, formDataId: formData?.id });\n                                        return config.customRender(formData, handleFieldChange, !!data);\n                                    })()}\n                                </div>\n                            )}\n                        </form>\n                    </div>\n                    \n                    <div className=\"modal-footer\">\n                        <button \n                            type=\"button\" \n                            className=\"btn btn-secondary\" \n                            onClick={handleClose}\n                            disabled={saving}\n                        >\n                            Cancel\n                        </button>\n                        <button \n                            type=\"button\" \n                            className=\"btn btn-primary\" \n                            onClick={handleSave}\n                            disabled={saving || loading}\n                        >\n                            {saving && <span className=\"spinner-border spinner-border-sm me-2\"></span>}\n                            {data ? 'Update' : 'Create'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DynamicModal; ","/**\n * DynamicStory Component\n * Full-screen story editor optimized for narrative content\n * Features minimal sidebar with basic configurations\n * Maintains admin sidebar (unlike DynamicPage)\n */\nimport { useState, useEffect, useRef } from 'react';\nimport EditorJs  from '../EditorJs';\nimport SkeletonField  from '../SkeletonField';\nimport './dynamicStory.css';\n\nconst DynamicStory = ({\n    show = false,\n    title = \"Edit Story\",\n    config = {},\n    entityData = null,\n    onSave = null,\n    onCancel = null,\n    loading = false\n}) => {\n\n    const [formData, setFormData] = useState({});\n    const [errors, setErrors] = useState({});\n    const [saving, setSaving] = useState(false);\n    const [asyncOptions, setAsyncOptions] = useState({});\n    const [loadingOptions, setLoadingOptions] = useState({});\n    const editorRef = useRef(null);\n\n    // Extract configuration\n    const {\n        fields = [],\n        entityType = 'story',\n        editorConfig = null,\n        customValidation = null\n    } = config;\n\n    // Initialize form data\n    useEffect(() => {\n        if (entityData) {\n            setFormData({ ...entityData });\n        } else {\n            // Initialize with default values from field configuration\n            const defaultData = {};\n            fields.forEach(field => {\n                defaultData[field.name] = field.defaultValue || '';\n            });\n            setFormData(defaultData);\n        }\n        setErrors({});\n    }, [entityData, fields]);\n\n    // Load async options for fields that need them\n    useEffect(() => {\n        fields.forEach(field => {\n            if (field.async && field.loadOptions) {\n                loadAsyncOptions(field.name, field.loadOptions);\n            }\n        });\n    }, [fields]);\n\n    // Check if has content field for Editor.js\n    const hasContentField = () => {\n        return fields.some(field => field.type === 'editor');\n    };\n\n    // Handle Editor.js onChange\n    const handleEditorChange = async () => {\n        if (editorRef.current) {\n            try {\n                const outputData = await editorRef.current.save();\n                handleInputChange('content', outputData);\n            } catch (error) {\n                console.error('Saving failed:', error);\n            }\n        }\n    };\n\n    // Load async options for select fields\n    const loadAsyncOptions = async (fieldName, loadOptionsFn) => {\n        if (!loadOptionsFn || asyncOptions[fieldName]) return;\n\n        setLoadingOptions(prev => ({ ...prev, [fieldName]: true }));\n        try {\n            const options = await loadOptionsFn();\n            setAsyncOptions(prev => ({ ...prev, [fieldName]: options }));\n        } catch (error) {\n            console.error(`Error loading options for ${fieldName}:`, error);\n        } finally {\n            setLoadingOptions(prev => ({ ...prev, [fieldName]: false }));\n        }\n    };\n\n    // Handle input changes\n    const handleInputChange = (fieldName, value) => {\n        // Convert number fields to proper type\n        let processedValue = value;\n        const field = fields.find(f => f.name === fieldName);\n        if (field && field.type === 'number') {\n            if (value === '' || value === null || value === undefined) {\n                processedValue = field.defaultValue || 0;\n            } else {\n                processedValue = parseInt(value) || field.defaultValue || 0;\n            }\n        }\n\n        setFormData(prev => ({\n            ...prev,\n            [fieldName]: processedValue\n        }));\n\n        // Clear error when user starts typing\n        if (errors[fieldName]) {\n            setErrors(prev => ({\n                ...prev,\n                [fieldName]: null\n            }));\n        }\n    };\n\n    // Validate form\n    const validateForm = () => {\n        const newErrors = {};\n\n        // Validate required fields\n        fields.forEach(field => {\n            if (field.required && (!formData[field.name] || formData[field.name] === '')) {\n                newErrors[field.name] = `${field.label} is required`;\n            }\n        });\n\n        // Run custom validation if provided\n        if (customValidation) {\n            const customErrors = customValidation(formData);\n            Object.assign(newErrors, customErrors);\n        }\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    // Handle save\n    const handleSave = async () => {\n        if (!validateForm()) {\n            return;\n        }\n\n        setSaving(true);\n        \n        try {\n            // Get latest editor data if editor exists\n            let finalData = { ...formData };\n            if (hasContentField() && editorRef.current) {\n                const editorData = await editorRef.current.save();\n                finalData.content = editorData;\n            }\n\n            // Apply onBeforeSave if available\n            let dataToSave = finalData;\n            if (config.onBeforeSave) {\n                dataToSave = config.onBeforeSave(finalData);\n            }\n\n            if (onSave) {\n                await onSave(dataToSave);\n            } else {\n                console.error('DynamicStory: No onSave function provided');\n            }\n        } catch (error) {\n            console.error('DynamicStory: Save failed:', error);\n            setErrors({ general: error.message || 'Save failed. Please try again.' });\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    // Handle cancel\n    const handleCancel = () => {\n        if (onCancel) {\n            onCancel();\n        }\n    };\n\n    // 100% Configurable panels system - completely agnostic\n    const panels = config.panels || {};\n    \n    // Initialize grouped fields dynamically based on configured panels only\n    const groupedFields = {};\n    Object.keys(panels).forEach(panelKey => {\n        groupedFields[panelKey] = [];\n    });\n\n    // Group fields based on their panel property\n    fields.forEach(field => {\n        // Only use field.panel if specified and panel exists in config\n        if (field.panel && panels[field.panel]) {\n            groupedFields[field.panel].push(field);\n        }\n        // Alternative: Use field.group as alias for panel\n        else if (field.group && panels[field.group]) {\n            groupedFields[field.group].push(field);\n        }\n        // If no panel specified, add to main panel if it exists\n        else if (panels.main) {\n            groupedFields.main.push(field);\n        }\n    });\n\n    const renderField = (field) => {\n        const value = formData[field.name] || '';\n        const hasError = errors[field.name];\n        \n        // Show skeleton if entity is loading\n        if (formData._isLoading) {\n            return (\n                <SkeletonField \n                    key={field.name}\n                    type={field.type} \n                    label={true} \n                    helpText={field.helpText}\n                    rows={field.rows}\n                />\n            );\n        }\n\n        switch (field.type) {\n            case 'text':\n            case 'email':\n            case 'url':\n                return (\n                    <input\n                        type={field.type}\n                        className={`form-control ${hasError ? 'is-invalid' : ''}`}\n                        value={value || ''}\n                        placeholder={field.placeholder}\n                        onChange={(e) => handleInputChange(field.name, e.target.value)}\n                    />\n                );\n            case 'number':\n                return (\n                    <input\n                        type=\"number\"\n                        className={`form-control ${hasError ? 'is-invalid' : ''}`}\n                        value={value || ''}\n                        placeholder={field.placeholder || '0'}\n                        min={field.min || 0}\n                        step={field.step || 1}\n                        onChange={(e) => handleInputChange(field.name, e.target.value)}\n                    />\n                );\n\n            case 'textarea':\n                return (\n                    <textarea\n                        className={`form-control ${hasError ? 'is-invalid' : ''}`}\n                        rows={field.rows || 3}\n                        value={value}\n                        placeholder={field.placeholder}\n                        onChange={(e) => handleInputChange(field.name, e.target.value)}\n                    />\n                );\n\n            case 'select':\n                // Handle async options\n                const options = field.async ? asyncOptions[field.name] || [] : field.options || [];\n                const isLoading = loadingOptions[field.name];\n\n                // Load async options if needed\n                if (field.async && field.loadOptions && !asyncOptions[field.name] && !isLoading) {\n                    loadAsyncOptions(field.name, field.loadOptions);\n                }\n\n                return (\n                    <div>\n                        <select\n                            className={`form-select ${hasError ? 'is-invalid' : ''}`}\n                            value={value}\n                            onChange={(e) => handleInputChange(field.name, e.target.value)}\n                            disabled={isLoading}\n                        >\n                            <option value=\"\">{field.placeholder || 'Select...'}</option>\n                            {options.map(option => (\n                                <option key={option.value} value={option.value}>\n                                    {option.label}\n                                </option>\n                            ))}\n                        </select>\n                        {isLoading && (\n                            <small className=\"text-muted\">Loading options...</small>\n                        )}\n                    </div>\n                );\n\n            case 'checkbox':\n                return (\n                    <div className=\"form-check\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-check-input\"\n                            checked={!!value}\n                            onChange={(e) => handleInputChange(field.name, e.target.checked)}\n                        />\n                        <label className=\"form-check-label\">\n                            {field.checkboxLabel || field.label}\n                        </label>\n                    </div>\n                );\n\n            case 'editor':\n                // Get editor data for initialization\n                const editorData = typeof value === 'object' ? value : null;\n                \n                return (\n                    <div className=\"story-editor-container\">\n                        <EditorJs\n                            ref={editorRef}\n                            holderId={editorConfig?.holderId || 'story-content-editor'}\n                            data={editorData}\n                            placeholder={editorConfig?.placeholder || 'Start writing your story...'}\n                            onChange={handleEditorChange}\n                            customTools={editorConfig?.tools || {}}\n                            className=\"dynamic-story-editor\"\n                        />\n                    </div>\n                );\n\n            case 'file':\n                return (\n                    <div className=\"file-upload-container\">\n                        <input\n                            type=\"file\"\n                            className={`form-control ${hasError ? 'is-invalid' : ''}`}\n                            accept={field.accept || '*'}\n                            onChange={(e) => handleInputChange(field.name, e.target.files[0])}\n                        />\n                        {value && (\n                            <div className=\"mt-2\">\n                                <small className=\"text-muted\">Current file: {typeof value === 'string' ? value : value?.name}</small>\n                            </div>\n                        )}\n                    </div>\n                );\n\n            case 'custom':\n                return field.render ? field.render(value, (newValue) => handleInputChange(field.name, newValue), formData) : null;\n\n            default:\n                return (\n                    <input\n                        type=\"text\"\n                        className={`form-control ${hasError ? 'is-invalid' : ''}`}\n                        value={value}\n                        placeholder={field.placeholder}\n                        onChange={(e) => handleInputChange(field.name, e.target.value)}\n                    />\n                );\n        }\n    };\n\n    const renderSidebarPanel = (title, fields, show = true, panelKey = null) => {\n        if (!show || fields.length === 0) return null;\n\n        return (\n            <div key={panelKey || title} className=\"story-panel-section\">\n                <h6 className=\"story-panel-title\">{title.toUpperCase()}</h6>\n                {fields.map(field => (\n                    <div key={field.name} className=\"form-group mb-3\">\n                        {field.type !== 'checkbox' && (\n                            <label className=\"form-label\">{field.label}</label>\n                        )}\n                        {renderField(field)}\n                        {field.helpText && (\n                            <small className=\"form-text text-muted\">{field.helpText}</small>\n                        )}\n                        {errors[field.name] && (\n                            <div className=\"invalid-feedback d-block\">\n                                {errors[field.name]}\n                            </div>\n                        )}\n                    </div>\n                ))}\n            </div>\n        );\n    };\n\n    if (!show) return null;\n\n    return (\n        <div className=\"dynamic-story-overlay\">\n            <div className=\"dynamic-story-container\">\n                {/* Story Header */}\n                <div className=\"story-header\">\n                    <div className=\"story-header-left\">\n                        <button \n                            className=\"btn btn-link story-back-btn\" \n                            onClick={handleCancel}\n                            disabled={saving}\n                        >\n                            <i className=\"fas fa-chevron-left me-2\"></i>BACK\n                        </button>\n                        <h1 className=\"story-title\">\n                            {title}\n                        </h1>\n                    </div>\n                    \n                    <div className=\"story-header-right\">\n                        <button \n                            className=\"btn btn-primary story-save-btn\" \n                            onClick={handleSave}\n                            disabled={saving || loading}\n                        >\n                            {saving ? (\n                                <>\n                                    <i className=\"fas fa-spinner fa-spin me-1\"></i>\n                                    SAVING...\n                                </>\n                            ) : (\n                                <>\n                                    <i className=\"fas fa-save me-1\"></i>\n                                    SAVE\n                                </>\n                            )}\n                        </button>\n                    </div>\n                </div>\n\n                {/* Story Layout */}\n                <div className=\"story-layout\">\n                    {/* Main Story Area */}\n                    <div className=\"story-main\">\n                        <div className=\"story-content\">\n                            {errors.general && (\n                                <div className=\"alert alert-danger mb-3\">\n                                    {errors.general}\n                                </div>\n                            )}\n                            \n                            {/* Dynamic Main Area Fields */}\n                            {Object.keys(panels).map(panelKey => {\n                                const panel = panels[panelKey];\n                                if (!panel.showInMain || !groupedFields[panelKey] || groupedFields[panelKey].length === 0) {\n                                    return null;\n                                }\n\n                                return (\n                                    <div key={panelKey} className=\"story-main-panel\">\n                                        {groupedFields[panelKey].map(field => (\n                                            <div key={field.name} className=\"story-field mb-4\">\n                                                {field.type !== 'editor' && field.type !== 'custom' && (\n                                                    <label className=\"story-field-label\">{field.label}</label>\n                                                )}\n                                                {renderField(field)}\n                                                {field.helpText && (\n                                                    <small className=\"form-text text-muted mt-1\">{field.helpText}</small>\n                                                )}\n                                                {errors[field.name] && (\n                                                    <div className=\"invalid-feedback d-block\">\n                                                        {errors[field.name]}\n                                                    </div>\n                                                )}\n                                            </div>\n                                        ))}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n\n                    {/* Minimal Story Sidebar */}\n                    <div className=\"story-sidebar\">\n                        <div className=\"story-sidebar-content\">\n                            {/* Dynamic Sidebar Panels */}\n                            {Object.keys(panels).map(panelKey => {\n                                const panel = panels[panelKey];\n                                if (!panel.showInSidebar || !groupedFields[panelKey] || groupedFields[panelKey].length === 0) {\n                                    return null;\n                                }\n\n                                return renderSidebarPanel(panel.title, groupedFields[panelKey], true, panelKey);\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DynamicStory; ","import { useState, useEffect, useCallback, forwardRef, useImperativeHandle } from 'react';\nimport DynamicPage from '../DynamicPage';\nimport DynamicModal from '../DynamicModal';\nimport DynamicStory from '../DynamicStory';\nimport './entityTable.css';\n\nconst EntityTable = forwardRef(({ \n    data = [], \n    config = {},\n    loading = false\n}, ref) => {\n    // Handle both old format (array) and new format (object with data and pagination)\n    const entities = Array.isArray(data) ? data : (data.data || []);\n    const pagination = data.pagination || null;\n\n    const [searchTerm, setSearchTerm] = useState(config.currentSearch || '');\n    const [filters, setFilters] = useState(config.currentFilters || {});\n    const [searchTimeout, setSearchTimeout] = useState(null);\n    \n    // Editor state\n    const [showEditor, setShowEditor] = useState(false);\n    const [editingEntity, setEditingEntity] = useState(null);\n    const [editorLoading, setEditorLoading] = useState(false);\n\n    // Extract configuration with defaults\n    const {\n        tableId = 'entity-table',\n        entityType = 'entity',\n        emptyMessage = 'No items found.',\n        enableSearch = false,\n        columns = [],\n        filters: filterOptions = [],\n        actionHandlers = {},\n        disableEdit = false,\n        disableDelete = false,\n        disableCreate = false,\n        showViewButton = false,\n        viewUrl = null,\n        customActions = [],\n        conditionalEdit = null,\n        conditionalDelete = null,\n        onSearch = null,\n        onPageChange = null,\n        onPageSizeChange = null,\n        // Editor configuration\n        editorType = 'page', // 'page', 'modal', 'story'\n        editorConfig = {},\n        onLoadEntity = null,\n        onSaveEntity = null\n    } = config;\n\n    // Debounced search function\n    const debouncedSearch = useCallback(() => {\n        if (onSearch) {\n            onSearch(searchTerm, filters);\n        }\n    }, [searchTerm, filters, onSearch]);\n\n    // Handle search input changes\n    const handleSearchChange = (value) => {\n        setSearchTerm(value);\n        \n        if (searchTimeout) {\n            clearTimeout(searchTimeout);\n        }\n        \n        const timeout = setTimeout(() => {\n            debouncedSearch();\n        }, 500);\n        \n        setSearchTimeout(timeout);\n    };\n\n    // Handle filter changes\n    const handleFilterChange = (field, value) => {\n        const newFilters = { ...filters };\n        if (value) {\n            newFilters[field] = value;\n        } else {\n            delete newFilters[field];\n        }\n        setFilters(newFilters);\n        \n        if (onSearch) {\n            onSearch(searchTerm, newFilters);\n        }\n    };\n\n    // Handle search button click\n    const handleSearchClick = () => {\n        debouncedSearch();\n    };\n\n    // Handle clear search\n    const handleClearSearch = () => {\n        setSearchTerm('');\n        setFilters({});\n        if (onSearch) {\n            onSearch('', {});\n        }\n    };\n\n    // Handle enter key in search\n    const handleSearchKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            debouncedSearch();\n        }\n    };\n\n    // Handle edit action\n    const handleEdit = async (type, id) => {\n        // Open editor immediately with skeletons\n        setShowEditor(true);\n        \n        if (id && onLoadEntity) {\n            // Set loading state and open with skeletons\n            setEditorLoading(true);\n            setEditingEntity({ id, _isLoading: true }); // Mark as loading with skeleton state\n            \n            try {\n                const entityData = await onLoadEntity(id);\n                setEditingEntity(entityData);\n            } catch (error) {\n                console.error('Error loading entity:', error);\n                setEditingEntity(null);\n            } finally {\n                setEditorLoading(false);\n            }\n        } else {\n            setEditingEntity(null); // New entity\n        }\n    };\n\n    // Handle create new action  \n    const handleCreateNew = () => {\n        setEditingEntity(null);\n        setShowEditor(true);\n    };\n\n    // Handle save entity\n    const handleSaveEntity = async (entityData) => {\n        if (onSaveEntity) {\n            try {\n                await onSaveEntity(entityData, editingEntity?.id || null);\n                setShowEditor(false);\n                setEditingEntity(null);\n            } catch (error) {\n                console.error('EntityTable: Error saving entity:', error);\n                // Don't close editor if save failed\n            }\n        } else {\n            console.error('EntityTable: No onSaveEntity function provided');\n        }\n    };\n\n    // Expose functions to parent component via ref\n    useImperativeHandle(ref, () => ({\n        handleCreateNew,\n        handleEdit\n    }));\n\n    // Handle cancel edit\n    const handleCancelEdit = () => {\n        setShowEditor(false);\n        setEditingEntity(null);\n    };\n\n    // Cleanup timeout on unmount\n    useEffect(() => {\n        return () => {\n            if (searchTimeout) {\n                clearTimeout(searchTimeout);\n            }\n        };\n    }, [searchTimeout]);\n\n    // Enhanced action handlers that support editing\n    const enhancedActionHandlers = {\n        ...actionHandlers,\n        edit: (type, id) => {\n            if (editorConfig && editorConfig.fields) {\n                handleEdit(type, id);\n            } else if (actionHandlers.edit) {\n                actionHandlers.edit(type, id);\n            }\n        }\n    };\n\n    // Render table cell based on column type\n    const renderTableCell = (entity, column) => {\n        const value = getNestedProperty(entity, column.field);\n        \n        switch (column.type) {\n            case 'text':\n                return <strong>{value || '-'}</strong>;\n                \n            case 'text-with-subtitle':\n                const subtitle = getNestedProperty(entity, column.subtitleField);\n                return (\n                    <div>\n                        <strong>{value || '-'}</strong>\n                        {subtitle && <><br /><small className=\"text-muted\">{subtitle}</small></>}\n                    </div>\n                );\n                \n            case 'badge':\n                const badgeClass = column.badgeClass ? column.badgeClass(value) : 'bg-secondary';\n                return <span className={`badge ${badgeClass}`}>{value || '-'}</span>;\n                \n            case 'badge-with-color':\n                const bgColor = getNestedProperty(entity, column.colorField) || '#6c757d';\n                return (\n                    <span \n                        className=\"badge rounded-pill\" \n                        style={{ backgroundColor: bgColor }}\n                    >\n                        {value || '-'}\n                    </span>\n                );\n                \n            case 'user-name':\n                const firstName = getNestedProperty(entity, 'author.first_name');\n                const lastName = getNestedProperty(entity, 'author.last_name');\n                return firstName && lastName ? `${firstName} ${lastName}` : '-';\n                \n            case 'date':\n                return value ? new Date(value).toLocaleDateString() : '-';\n                \n            case 'code':\n                return <code>/{value}</code>;\n                \n            case 'system-badge':\n                return entity.is_system ? <span className=\"badge bg-info ms-2\">System</span> : '';\n                \n            case 'custom':\n                return column.render ? column.render(entity, value) : (value || '-');\n                \n            default:\n                return value || '-';\n        }\n    };\n\n    // Render action buttons\n    const renderActionButtons = (entity) => {\n        const buttons = [];\n        \n        // Edit button\n        if (!disableEdit && (!conditionalEdit || conditionalEdit(entity))) {\n            buttons.push(\n                <button\n                    key=\"edit\"\n                    className=\"btn btn-sm btn-primary me-1\"\n                    onClick={() => enhancedActionHandlers.edit && enhancedActionHandlers.edit(entityType, entity.id)}\n                >\n                    <i className=\"fas fa-edit\"></i>\n                </button>\n            );\n        }\n        \n        // View/Preview button\n        if (showViewButton && viewUrl) {\n            const url = typeof viewUrl === 'function' ? viewUrl(entity) : viewUrl.replace(':id', entity.id);\n            buttons.push(\n                <a\n                    key=\"view\"\n                    href={url}\n                    target=\"_blank\"\n                    className=\"btn btn-sm btn-secondary me-1\"\n                    rel=\"noreferrer\"\n                >\n                    <i className=\"fas fa-eye\"></i>\n                </a>\n            );\n        }\n        \n        // Delete button\n        if (!disableDelete && (!conditionalDelete || conditionalDelete(entity))) {\n            buttons.push(\n                <button\n                    key=\"delete\"\n                    className=\"btn btn-sm btn-danger\"\n                    onClick={() => enhancedActionHandlers.delete && enhancedActionHandlers.delete(entityType, entity.id)}\n                >\n                    <i className=\"fas fa-trash\"></i>\n                </button>\n            );\n        }\n        \n        // Custom action buttons\n        if (customActions) {\n            customActions.forEach((action, index) => {\n                if (!action.condition || action.condition(entity)) {\n                    buttons.push(\n                        <button\n                            key={`custom-${index}`}\n                            className={`btn btn-sm ${action.class || 'btn-outline-primary'} me-1`}\n                            onClick={() => enhancedActionHandlers[action.action] && enhancedActionHandlers[action.action](entityType, entity.id)}\n                        >\n                            <i className={action.icon}></i> {action.label || ''}\n                        </button>\n                    );\n                }\n            });\n        }\n        \n        return buttons;\n    };\n\n    // Get nested property value\n    const getNestedProperty = (obj, path) => {\n        if (!path || typeof path !== 'string') return null;\n        return path.split('.').reduce((current, key) => {\n            return current && current[key] !== undefined ? current[key] : null;\n        }, obj);\n    };\n\n    // Render search and filters\n    const renderSearchAndFilters = () => {\n        if (!enableSearch && !filterOptions.length) return null;\n        \n        return (\n            <div className=\"row mb-3\">\n                {enableSearch && (\n                    <div className=\"col-md-4\">\n                        <div className=\"input-group\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Search in all fields...\"\n                                value={searchTerm}\n                                onChange={(e) => handleSearchChange(e.target.value)}\n                                onKeyPress={handleSearchKeyPress}\n                            />\n                            <button\n                                className=\"btn btn-outline-secondary\"\n                                type=\"button\"\n                                onClick={handleSearchClick}\n                            >\n                                <i className=\"fas fa-search\"></i>\n                            </button>\n                            <button\n                                className=\"btn btn-outline-secondary\"\n                                type=\"button\"\n                                onClick={handleClearSearch}\n                            >\n                                <i className=\"fas fa-times\"></i>\n                            </button>\n                        </div>\n                    </div>\n                )}\n                \n                {filterOptions.length > 0 && (\n                    <div className={enableSearch ? \"col-md-8\" : \"col-md-12\"}>\n                        <div className=\"row g-2\">\n                            {filterOptions.map((filter) => (\n                                <div key={filter.field} className=\"col-md-4 col-lg-3\">\n                                    {filter.type === 'select' ? (\n                                        <select\n                                            className=\"form-select form-control-sm\"\n                                            value={filters[filter.field] || ''}\n                                            onChange={(e) => handleFilterChange(filter.field, e.target.value)}\n                                        >\n                                            <option value=\"\">{filter.placeholder || `All ${filter.label}`}</option>\n                                            {filter.options && filter.options.map((option) => (\n                                                <option key={option.value} value={option.value}>\n                                                    {option.label}\n                                                </option>\n                                            ))}\n                                        </select>\n                                    ) : filter.type === 'date' ? (\n                                        <input\n                                            type=\"date\"\n                                            className=\"form-control form-control-sm\"\n                                            value={filters[filter.field] || ''}\n                                            onChange={(e) => handleFilterChange(filter.field, e.target.value)}\n                                        />\n                                    ) : (\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control form-control-sm\"\n                                            placeholder={filter.placeholder || `Filter by ${filter.label}`}\n                                            value={filters[filter.field] || ''}\n                                            onChange={(e) => handleFilterChange(filter.field, e.target.value)}\n                                        />\n                                    )}\n                                </div>\n                            ))}\n                            \n                            {/* Clear filters button */}\n                            {Object.keys(filters).length > 0 && (\n                                <div className=\"col-md-4 col-lg-3 d-flex align-items-end\">\n                                    <button\n                                        className=\"btn btn-outline-secondary btn-sm\"\n                                        onClick={handleClearSearch}\n                                        title=\"Clear all filters\"\n                                    >\n                                        <i className=\"fas fa-filter-circle-xmark me-1\"></i>\n                                        Clear Filters\n                                    </button>\n                                </div>\n                            )}\n                        </div>\n                        \n                        {/* Active filters indicator */}\n                        {Object.keys(filters).length > 0 && (\n                            <div className=\"row mt-2\">\n                                <div className=\"col-12\">\n                                    <small className=\"text-muted\">\n                                        <i className=\"fas fa-filter me-1\"></i>\n                                        Active filters: {Object.keys(filters).map(field => {\n                                            const filter = filterOptions.find(f => f.field === field);\n                                            const value = filters[field];\n                                            return `${filter?.label || field}: ${value}`;\n                                        }).join(', ')}\n                                    </small>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    };\n\n    // Render pagination\n    const renderPagination = () => {\n        if (!pagination || pagination.pages <= 1) return null;\n        \n        const { page, pages, total, limit } = pagination;\n        const startItem = ((page - 1) * limit) + 1;\n        const endItem = Math.min(page * limit, total);\n        \n        // Generate page numbers to show\n        const pageNumbers = [];\n        const maxVisiblePages = 5;\n        let startPage = Math.max(1, page - Math.floor(maxVisiblePages / 2));\n        let endPage = Math.min(pages, startPage + maxVisiblePages - 1);\n        \n        if (endPage - startPage < maxVisiblePages - 1) {\n            startPage = Math.max(1, endPage - maxVisiblePages + 1);\n        }\n        \n        for (let i = startPage; i <= endPage; i++) {\n            pageNumbers.push(i);\n        }\n        \n        return (\n            <div className=\"d-flex justify-content-between align-items-center mt-3\">\n                <div className=\"d-flex align-items-center\">\n                    <span className=\"text-muted me-3\">\n                        Showing {startItem}-{endItem} of {total} items\n                    </span>\n                    <select\n                        className=\"form-select form-select-sm\"\n                        style={{ width: 'auto' }}\n                        value={limit}\n                        onChange={(e) => onPageSizeChange && onPageSizeChange(parseInt(e.target.value))}\n                    >\n                        <option value=\"10\">10</option>\n                        <option value=\"20\">20</option>\n                        <option value=\"50\">50</option>\n                        <option value=\"100\">100</option>\n                    </select>\n                    <span className=\"text-muted ms-2\">per page</span>\n                </div>\n                \n                <nav>\n                    <ul className=\"pagination pagination-sm mb-0\">\n                        {/* First Page */}\n                        <li className={`page-item ${page === 1 ? 'disabled' : ''}`}>\n                            <button\n                                className=\"page-link\"\n                                disabled={page === 1}\n                                onClick={() => onPageChange && onPageChange(1)}\n                            >\n                                <i className=\"fas fa-angle-double-left\"></i>\n                            </button>\n                        </li>\n                        \n                        {/* Previous Page */}\n                        <li className={`page-item ${page === 1 ? 'disabled' : ''}`}>\n                            <button\n                                className=\"page-link\"\n                                disabled={page === 1}\n                                onClick={() => onPageChange && onPageChange(page - 1)}\n                            >\n                                <i className=\"fas fa-angle-left\"></i>\n                            </button>\n                        </li>\n                        \n                        {/* Page Numbers */}\n                        {pageNumbers.map((pageNum) => (\n                            <li\n                                key={pageNum}\n                                className={`page-item ${pageNum === page ? 'active' : ''}`}\n                            >\n                                <button\n                                    className=\"page-link\"\n                                    onClick={() => onPageChange && onPageChange(pageNum)}\n                                >\n                                    {pageNum}\n                                </button>\n                            </li>\n                        ))}\n                        \n                        {/* Next Page */}\n                        <li className={`page-item ${page === pages ? 'disabled' : ''}`}>\n                            <button\n                                className=\"page-link\"\n                                disabled={page === pages}\n                                onClick={() => onPageChange && onPageChange(page + 1)}\n                            >\n                                <i className=\"fas fa-angle-right\"></i>\n                            </button>\n                        </li>\n                        \n                        {/* Last Page */}\n                        <li className={`page-item ${page === pages ? 'disabled' : ''}`}>\n                            <button\n                                className=\"page-link\"\n                                disabled={page === pages}\n                                onClick={() => onPageChange && onPageChange(pages)}\n                            >\n                                <i className=\"fas fa-angle-double-right\"></i>\n                            </button>\n                        </li>\n                    </ul>\n                </nav>\n            </div>\n        );\n    };\n\n    // Render editor component based on type\n    const renderEditor = () => {\n        if (!showEditor || !editorConfig) return null;\n\n        console.log(\"editorConfig\", editorConfig);\n        console.log(\"editorType\", editorType);\n\n        switch (editorType) {\n            case 'page':\n                return (\n                    <DynamicPage\n                        show={showEditor}\n                        title={editorConfig.title || `${editingEntity ? 'Edit' : 'Create'} ${entityType}`}\n                        config={editorConfig}\n                        entityData={editingEntity}\n                        onSave={handleSaveEntity}\n                        onCancel={handleCancelEdit}\n                        loading={editorLoading}\n                    />\n                );\n            case 'modal':\n                return (\n                    <DynamicModal\n                        isOpen={showEditor}\n                        onClose={handleCancelEdit}\n                        onSave={handleSaveEntity}\n                        data={editingEntity}\n                        config={editorConfig}\n                        loading={editorLoading}\n                        modalWidth={editorConfig.modalWidth}\n                    />\n                );\n            case 'story':\n                return (\n                    <DynamicStory\n                        show={showEditor}\n                        title={editorConfig.title || `${entityType} Editor`}\n                        config={editorConfig}\n                        entityData={editingEntity}\n                        onSave={handleSaveEntity}\n                        onCancel={handleCancelEdit}\n                        loading={loading}\n                    />\n                );\n            default:\n                return null;\n        }\n    };\n\n    // Empty state\n    if (!entities.length && !loading) {\n        return (\n            <>\n                <div className=\"table-responsive\">\n                    {renderSearchAndFilters()}\n                    \n                    <div className=\"alert alert-info text-center py-4\">\n                        <i className=\"fas fa-search fa-2x text-muted mb-3\"></i>\n                        <div className=\"h5\">{emptyMessage}</div>\n                        <p className=\"text-muted mb-0\">\n                            {searchTerm || Object.keys(filters).length > 0\n                                ? 'Try adjusting your search criteria or clear the filters to see all items.'\n                                : 'Create your first item using the button above.'}\n                        </p>\n                    </div>\n                    \n                    {pagination && renderPagination()}\n                </div>\n                {renderEditor()}\n            </>\n        );\n    }\n\n    // Loading state\n    if (loading) {\n        return (\n            <>\n                <div className=\"table-responsive\">\n                    {renderSearchAndFilters()}\n                    <div className=\"text-center py-5\">\n                        <div className=\"spinner-border text-primary\" role=\"status\">\n                            <span className=\"visually-hidden\">Loading...</span>\n                        </div>\n                    </div>\n                </div>\n                {renderEditor()}\n            </>\n        );\n    }\n\n    // Main table\n    return (\n        <>\n            <div className=\"table-responsive\">\n                {renderSearchAndFilters()}\n                \n                <table className=\"table table-hover\" id={tableId}>\n                    <thead>\n                        <tr>\n                            {columns.map((col, index) => (\n                                <th key={index}>{col.header}</th>\n                            ))}\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {entities.map((entity) => (\n                            <tr key={entity.id}>\n                                {columns.map((col, index) => (\n                                    <td key={index}>\n                                        {renderTableCell(entity, col)}\n                                    </td>\n                                ))}\n                                <td>\n                                    {renderActionButtons(entity)}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                \n                {pagination && renderPagination()}\n            </div>\n            {renderEditor()}\n        </>\n    );\n});\n\nexport default EntityTable; ","import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Sidebar from '../../components/Sidebar';\nimport Navbar from '../../components/Navbar';\nimport EntityTable from '../../components/EntityTable';\nimport './admin.css';\n\nconst Admin = ({ entities = [], customRoutes = [] }) => {\n    const navigate = useNavigate();\n    const [loading, setLoading] = useState(true);\n    const [user, setUser] = useState(null);\n    const [currentSection, setCurrentSection] = useState('dashboard');\n    const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);\n\n    useEffect(() => {\n        const checkAuth = async () => {\n            try {\n                const response = await fetch('/api/auth/me');\n                if (response.ok) {\n                    const data = await response.json();\n                    if (data.success) {\n                        setUser(data.user);\n                    } else {\n                        navigate('/login');\n                    }\n                } else {\n                    navigate('/login');\n                }\n            } catch (error) {\n                console.error('Auth check error:', error);\n                navigate('/login');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        checkAuth();\n    }, [navigate]);\n\n    const handleLogout = async () => {\n        try {\n            await fetch('/api/auth/logout', { method: 'POST' });\n            navigate('/login');\n        } catch (error) {\n            console.error('Logout error:', error);\n            navigate('/login');\n        }\n    };\n\n    const handleSectionChange = (section) => {\n        setCurrentSection(section);\n        setMobileSidebarOpen(false); // Close mobile sidebar when section changes\n    };\n\n    const toggleMobileSidebar = () => {\n        setMobileSidebarOpen(!mobileSidebarOpen);\n    };\n\n    const renderEntitySection = (entity) => {\n        // If entity has a custom component, render it\n        if (entity.component) {\n            const EntityComponent = entity.component;\n            return <EntityComponent />;\n        }\n\n\n        console.log(\"Entity\",entity);\n        // Otherwise render with EntityTable\n        return (\n            <div className=\"content-section\">\n                <div className=\"content-header\">\n                    <h1>\n                        <i className={`${entity.icon || 'fas fa-table'} me-2`}></i>\n                        {entity.label}\n                    </h1>\n                    <p>{entity.description || `Manage your ${entity.label.toLowerCase()}`}</p>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <EntityTable \n                            data={entity.data || []}\n                            config={entity.config || {}}\n                            loading={entity.loading || false}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    const renderCurrentSection = () => {\n        // Check if current section is a custom entity\n        const customEntity = entities.find(entity => entity.key === currentSection);\n        if (customEntity) {\n            return renderEntitySection(customEntity);\n        }\n\n        // Default sections\n        switch (currentSection) {\n            case 'dashboard':\n                return (\n                    <div className=\"content-section\">\n                        <div className=\"content-header\">\n                            <h1>\n                                <i className=\"fas fa-tachometer-alt me-2\"></i>\n                                Dashboard\n                            </h1>\n                            <p>Welcome to your admin panel overview</p>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-body\">\n                                        <p>Bienvenido al panel de administración. Aquí se implementarán todas las funcionalidades del CMS.</p>\n                                        <div className=\"alert alert-info\">\n                                            <i className=\"fas fa-info-circle me-2\"></i>\n                                            Este es un componente temporal. Según las reglas del proyecto, aquí se implementará el admin completo con todas las entidades del sistema.\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                );\n            default:\n                return (\n                    <div className=\"content-section\">\n                        <div className=\"alert alert-danger\">\n                            <i className=\"fas fa-exclamation-triangle me-2\"></i>\n                            Sección no encontrada: {currentSection}\n                        </div>\n                    </div>\n                );\n        }\n    };\n\n    if (loading) {\n        return (\n            <div className=\"d-flex justify-content-center align-items-center vh-100\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"admin-app\">\n            {/* Top Navigation Bar */}\n            <Navbar \n                user={user}\n                onLogout={handleLogout}\n                onToggleMobileSidebar={toggleMobileSidebar}\n            />\n\n            {/* Main Container */}\n            <div className=\"admin-container\">\n                {/* Sidebar */}\n                <Sidebar \n                    currentSection={currentSection}\n                    onSectionChange={handleSectionChange}\n                    mobileSidebarOpen={mobileSidebarOpen}\n                    userPermissions={user?.permissions || []}\n                    entities={entities}\n                />\n\n                {/* Main Content */}\n                <main className=\"admin-content\">\n                    {renderCurrentSection()}\n                </main>\n            </div>\n\n            {/* Mobile sidebar overlay */}\n            {mobileSidebarOpen && (\n                <div \n                    className=\"mobile-sidebar-overlay\"\n                    onClick={() => setMobileSidebarOpen(false)}\n                ></div>\n            )}\n        </div>\n    );\n};\n\nexport default Admin;","// Utility functions for entity configuration\n\n/**\n * Creates a basic entity configuration for EntityTable\n * @param {Object} options - Entity configuration options\n * @returns {Object} Complete entity configuration\n */\nexport const createEntity = ({\n  key,\n  label,\n  icon = 'fas fa-table',\n  group = 'Custom',\n  permission = null,\n  description = null,\n  component = null,\n  config = {},\n  data = [],\n  loading = false\n}) => {\n  return {\n    key,\n    label,\n    icon,\n    group,\n    permission,\n    description: description || `Manage your ${label.toLowerCase()}`,\n    component,\n    config: {\n      entityType: key,\n      ...config\n    },\n    data,\n    loading\n  };\n};\n\n/**\n * Creates a column configuration for EntityTable\n * @param {Object} options - Column configuration options\n * @returns {Object} Column configuration\n */\nexport const createColumn = ({\n  key,\n  label,\n  type = 'text',\n  sortable = true,\n  searchable = false,\n  render = null,\n  className = '',\n  width = null,\n  subtitleField = null,\n  badgeClass = null,\n  colorField = null\n}) => {\n  return {\n    field: key, // EntityTable expects 'field' instead of 'key'\n    header: label, // EntityTable expects 'header' instead of 'label'\n    type,\n    sortable,\n    searchable,\n    render,\n    className,\n    width,\n    subtitleField, // For text-with-subtitle type\n    badgeClass, // For badge type\n    colorField // For badge-with-color type\n  };\n};\n\n/**\n * Creates an action configuration for EntityTable\n * @param {Object} options - Action configuration options\n * @returns {Object} Action configuration\n */\nexport const createAction = ({\n  key,\n  label,\n  icon,\n  variant = 'primary',\n  handler,\n  condition = null,\n  confirm = false,\n  confirmMessage = 'Are you sure?'\n}) => {\n  // Convert variant to EntityTable expected class format\n  const classMap = {\n    primary: 'btn-primary',\n    secondary: 'btn-secondary',\n    success: 'btn-success',\n    danger: 'btn-danger',\n    warning: 'btn-warning',\n    info: 'btn-info',\n    light: 'btn-light',\n    dark: 'btn-dark'\n  };\n\n  return {\n    action: key, // EntityTable expects 'action' instead of 'key'\n    label,\n    icon,\n    class: classMap[variant] || 'btn-primary', // EntityTable expects 'class' instead of 'variant'\n    handler,\n    condition,\n    confirm,\n    confirmMessage\n  };\n};\n\n/**\n * Creates a filter configuration for EntityTable\n * @param {Object} options - Filter configuration options\n * @returns {Object} Filter configuration\n */\nexport const createFilter = ({\n  field,\n  label,\n  type = 'select',\n  options = [],\n  multiple = false,\n  defaultValue = null,\n  placeholder = ''\n}) => {\n  return {\n    field, // EntityTable expects 'field' instead of 'key'\n    label,\n    type,\n    options,\n    multiple,\n    defaultValue,\n    placeholder // EntityTable uses placeholder for filter options\n  };\n};\n\n/**\n * Creates a complete EntityTable configuration\n * @param {Object} options - Configuration options\n * @returns {Object} Complete EntityTable configuration\n */\nexport const createEntityTableConfig = ({\n  tableId = 'entity-table',\n  entityType,\n  columns = [],\n  enableSearch = true,\n  filters = [],\n  customActions = [],\n  actionHandlers = {},\n  disableEdit = false,\n  disableDelete = false,\n  disableCreate = false,\n  showViewButton = false,\n  viewUrl = null,\n  conditionalEdit = null,\n  conditionalDelete = null,\n  editorType = 'page',\n  editorConfig = {},\n  onLoadEntity = null,\n  onSaveEntity = null,\n  onSearch = null,\n  onPageChange = null,\n  onPageSizeChange = null,\n  emptyMessage = 'No items found.'\n}) => {\n  return {\n    tableId,\n    entityType,\n    columns,\n    enableSearch,\n    filters,\n    customActions,\n    actionHandlers,\n    disableEdit,\n    disableDelete,\n    disableCreate,\n    showViewButton,\n    viewUrl,\n    conditionalEdit,\n    conditionalDelete,\n    editorType,\n    editorConfig,\n    onLoadEntity,\n    onSaveEntity,\n    onSearch,\n    onPageChange,\n    onPageSizeChange,\n    emptyMessage\n  };\n};\n\n/**\n * Creates a route configuration\n * @param {Object} options - Route configuration options\n * @returns {Object} Route configuration\n */\nexport const createRoute = ({\n  path,\n  element,\n  exact = false\n}) => {\n  return {\n    path,\n    element,\n    exact\n  };\n};\n\n// Common entity configurations that can be reused\nexport const commonEntityGroups = {\n  CONTENT: 'Content',\n  USERS: 'Users',\n  SYSTEM: 'System',\n  CUSTOM: 'Custom'\n};\n\nexport const commonIcons = {\n  USERS: 'fas fa-users',\n  USER: 'fas fa-user',\n  SETTINGS: 'fas fa-cog',\n  DASHBOARD: 'fas fa-tachometer-alt',\n  CONTENT: 'fas fa-file-alt',\n  TABLE: 'fas fa-table',\n  EDIT: 'fas fa-edit',\n  DELETE: 'fas fa-trash',\n  VIEW: 'fas fa-eye',\n  ADD: 'fas fa-plus',\n  SAVE: 'fas fa-save',\n  CANCEL: 'fas fa-times'\n};\n","/**\n * Generic Entity Service - API Layer\n * Handles all CRUD operations for any entity\n * Configurable and reusable across different entities\n */\nclass EntityService {\n    constructor(entityConfig = {}) {\n        this.entityName = entityConfig.entityName || 'entity';\n        this.baseUrl = entityConfig.baseUrl || `/api/admin/${this.entityName}`;\n        this.config = entityConfig;\n    }\n\n    // ============================================================================\n    // REQUIRED METHODS (STANDARD INTERFACE)\n    // ============================================================================\n\n    /**\n     * Helper method to make API requests with proper error handling\n     * @param {string} endpoint - API endpoint \n     * @param {object} options - Request options\n     * @returns {Promise<object>} API response\n     */\n    async makeRequest(endpoint, options = {}) {\n        try {\n            const url = endpoint.startsWith('http') ? endpoint : `${this.baseUrl}${endpoint}`;\n            \n            const defaultOptions = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include' // Include cookies for JWT\n            };\n\n            const response = await fetch(url, { ...defaultOptions, ...options });\n            \n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({}));\n                throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error(`${this.entityName} API Error:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Get current affiliate ID from localStorage\n     * @returns {number|null} Current affiliate ID\n     */\n    getCurrentAffiliateId() {\n        try {\n            const affiliateId = localStorage.getItem('currentAffiliateId');\n            return affiliateId ? parseInt(affiliateId) : null;\n        } catch (error) {\n            console.error('Error getting affiliate ID from localStorage:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Get entities list with pagination and filtering\n     * @param {object} params - Query parameters\n     * @returns {Promise<object>} Entities list with pagination\n     */\n    async get(params = {}) {\n        const queryParams = new URLSearchParams();\n        \n        // Standard pagination params\n        if (params.page) queryParams.append('page', params.page);\n        if (params.limit) queryParams.append('limit', params.limit);\n        if (params.search) queryParams.append('search', params.search);\n        \n        // Always include affiliate_id if available\n        const affiliateId = this.getCurrentAffiliateId();\n        if (affiliateId) {\n            queryParams.append('affiliate_id', affiliateId);\n        }\n        \n        // Apply entity-specific filters from config\n        if (this.config.filters) {\n            this.config.filters.forEach(filter => {\n                if (params[filter]) queryParams.append(filter, params[filter]);\n            });\n        }\n\n        const endpoint = queryParams.toString() ? `?${queryParams.toString()}` : '';\n        return await this.makeRequest(endpoint);\n    }\n\n    /**\n     * Get single entity by ID\n     * @param {number} id - Entity ID\n     * @returns {Promise<object>} Entity data\n     */\n    async getById(id) {\n        const affiliateId = this.getCurrentAffiliateId();\n        if (affiliateId) {\n            return await this.makeRequest(`/${id}?affiliate_id=${affiliateId}`);\n        }\n        return await this.makeRequest(`/${id}`);\n    }\n\n    /**\n     * Create new entity\n     * @param {object} data - Entity data\n     * @returns {Promise<object>} Created entity\n     */\n    async create(data) {\n        // Validate required fields if configured\n        if (this.config.validation) {\n            const validationErrors = this.validateEntityData(data);\n            if (Object.keys(validationErrors).length > 0) {\n                throw new Error(Object.values(validationErrors)[0]);\n            }\n        }\n\n        // Always include affiliate_id if available\n        const affiliateId = this.getCurrentAffiliateId();\n        const entityData = affiliateId ? { ...data, affiliate_id: affiliateId } : data;\n\n        return await this.makeRequest('', {\n            method: 'POST',\n            body: JSON.stringify(entityData)\n        });\n    }\n\n    /**\n     * Update existing entity\n     * @param {number} id - Entity ID\n     * @param {object} data - Updated entity data\n     * @returns {Promise<object>} Updated entity\n     */\n    async update(id, data) {\n        // Validate required fields if configured\n        if (this.config.validation) {\n            const validationErrors = this.validateEntityData(data, true);\n            if (Object.keys(validationErrors).length > 0) {\n                throw new Error(Object.values(validationErrors)[0]);\n            }\n        }\n\n        // Always include affiliate_id if available\n        const affiliateId = this.getCurrentAffiliateId();\n        const entityData = affiliateId ? { ...data, affiliate_id: affiliateId } : data;\n\n        return await this.makeRequest(`/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(entityData)\n        });\n    }\n\n    /**\n     * Delete entity\n     * @param {number} id - Entity ID\n     * @returns {Promise<object>} Deletion result\n     */\n    async delete(id) {\n        const affiliateId = this.getCurrentAffiliateId();\n        if (affiliateId) {\n            return await this.makeRequest(`/${id}?affiliate_id=${affiliateId}`, {\n                method: 'DELETE'\n            });\n        }\n        return await this.makeRequest(`/${id}`, {\n            method: 'DELETE'\n        });\n    }\n\n    // ============================================================================\n    // UTILITY METHODS\n    // ============================================================================\n\n    /**\n     * Validate entity data based on configuration\n     * @param {object} data - Entity data to validate\n     * @param {boolean} isUpdate - Whether this is an update operation\n     * @returns {object} Validation errors\n     */\n    validateEntityData(data, isUpdate = false) {\n        const errors = {};\n\n        if (!this.config.validation) return errors;\n\n        Object.entries(this.config.validation).forEach(([field, rules]) => {\n            const value = data[field];\n\n            // Required field validation\n            if (rules.required && (!value || (typeof value === 'string' && !value.trim()))) {\n                errors[field] = rules.message || `${field} is required`;\n                return;\n            }\n\n            // Email validation\n            if (rules.email && value && !this.isValidEmail(value)) {\n                errors[field] = rules.message || 'Invalid email format';\n                return;\n            }\n\n            // Custom validation function\n            if (rules.validator && typeof rules.validator === 'function') {\n                const result = rules.validator(value, data, isUpdate);\n                if (result !== true) {\n                    errors[field] = result || rules.message || `Invalid ${field}`;\n                }\n            }\n        });\n\n        return errors;\n    }\n\n    /**\n     * Get default entity data structure\n     * @returns {object} Default entity data\n     */\n    getDefaultEntityData() {\n        return this.config.defaultData || {};\n    }\n\n    /**\n     * Format entity for display\n     * @param {object} entity - Entity object\n     * @returns {object} Formatted entity\n     */\n    formatEntityForDisplay(entity) {\n        if (!this.config.formatForDisplay) {\n            return entity;\n        }\n\n        return this.config.formatForDisplay(entity);\n    }\n\n    /**\n     * Generate slug from name (if configured)\n     * @param {string} name - Entity name\n     * @returns {string} Generated slug\n     */\n    generateSlug(name) {\n        if (!name) return '';\n        \n        return name\n            .toLowerCase()\n            .replace(/[^a-z0-9 -]/g, '')\n            .replace(/\\s+/g, '-')\n            .replace(/-+/g, '-')\n            .trim('-');\n    }\n\n    /**\n     * Validate email format\n     * @param {string} email - Email to validate\n     * @returns {boolean} Is valid email\n     */\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    /**\n     * Get options for select fields\n     * @param {string} optionType - Type of options to get\n     * @returns {Array} Options array\n     */\n    getOptions(optionType) {\n        if (this.config.options && this.config.options[optionType]) {\n            return this.config.options[optionType];\n        }\n        return [];\n    }\n\n    // ============================================================================\n    // RELATIONSHIP METHODS (GENERIC)\n    // ============================================================================\n\n    /**\n     * Get related entities (generic relationship handler)\n     * @param {number} entityId - Entity ID\n     * @param {string} relationshipType - Type of relationship\n     * @returns {Promise<object>} Related entities\n     */\n    async getRelated(entityId, relationshipType) {\n        return await this.makeRequest(`/${entityId}/${relationshipType}`);\n    }\n\n    /**\n     * Add relationship\n     * @param {number} entityId - Entity ID\n     * @param {string} relationshipType - Type of relationship\n     * @param {number} relatedId - Related entity ID\n     * @param {object} relationshipData - Additional relationship data\n     * @returns {Promise<object>} Add result\n     */\n    async addRelated(entityId, relationshipType, relatedId, relationshipData = {}) {\n        return await this.makeRequest(`/${entityId}/${relationshipType}`, {\n            method: 'POST',\n            body: JSON.stringify({\n                related_id: relatedId,\n                ...relationshipData\n            })\n        });\n    }\n\n    /**\n     * Update relationship\n     * @param {number} entityId - Entity ID\n     * @param {string} relationshipType - Type of relationship\n     * @param {number} relatedId - Related entity ID\n     * @param {object} relationshipData - Updated relationship data\n     * @returns {Promise<object>} Update result\n     */\n    async updateRelated(entityId, relationshipType, relatedId, relationshipData) {\n        return await this.makeRequest(`/${entityId}/${relationshipType}/${relatedId}`, {\n            method: 'PUT',\n            body: JSON.stringify(relationshipData)\n        });\n    }\n\n    /**\n     * Remove relationship\n     * @param {number} entityId - Entity ID\n     * @param {string} relationshipType - Type of relationship\n     * @param {number} relatedId - Related entity ID\n     * @returns {Promise<object>} Remove result\n     */\n    async removeRelated(entityId, relationshipType, relatedId) {\n        return await this.makeRequest(`/${entityId}/${relationshipType}/${relatedId}`, {\n            method: 'DELETE'\n        });\n    }\n\n    /**\n     * Get current user info (if applicable)\n     * @returns {Promise<object>} Current user data\n     */\n    async getCurrentUser() {\n        try {\n            const response = await fetch('/api/admin/auth/current-user', {\n                credentials: 'include'\n            });\n            \n            if (response.ok) {\n                const data = await response.json();\n                return data.success ? data.data : null;\n            }\n            \n            return null;\n        } catch (error) {\n            console.error('Error fetching current user:', error);\n            return null;\n        }\n    }\n\n    // ============================================================================\n    // CONFIGURATION METHODS\n    // ============================================================================\n\n    /**\n     * Update service configuration\n     * @param {object} newConfig - New configuration\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        if (newConfig.entityName) {\n            this.entityName = newConfig.entityName;\n            this.baseUrl = newConfig.baseUrl || `/api/admin/${this.entityName}`;\n        }\n    }\n\n    /**\n     * Create a new instance with different configuration\n     * @param {object} entityConfig - Entity configuration\n     * @returns {EntityService} New service instance\n     */\n    static createForEntity(entityConfig) {\n        return new EntityService(entityConfig);\n    }\n}\n\nexport default EntityService;\n","/**\n * Entity Factory - Automatic Entity Creation with EntityService\n * Creates fully functional entities with automatic data fetching and EntityTable rendering\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport EntityService from '../services/EntityService.js';\nimport EntityTable from '../components/EntityTable';\nimport { useAffiliate } from '../contexts/AffiliateContext';\n\n/**\n * Creates a complete entity with automatic data fetching and EntityTable rendering\n * @param {object} config - Entity configuration\n * @returns {object} Complete entity configuration with React hooks\n */\nexport function createAutoEntity(config) {\n    const {\n        // Required\n        key,\n        label,\n        \n        // Service configuration\n        entityName = key,\n        baseUrl,\n        validation,\n        defaultData,\n        filters,\n        options,\n        formatForDisplay,\n\n        // Config de editores\n        editorConfig = {},\n        editorType = 'page',\n        \n        // UI configuration\n        icon,\n        group,\n        description,\n        columns = [],\n        tableConfig = {},\n        \n        // Create button configuration\n        createButton = {},\n        \n        // Optional overrides\n        customHandlers = {},\n        customComponent = null\n    } = config;\n\n    // Extract create button configuration with defaults\n    const {\n        show = true, // Show by default\n        text = `Add New ${label}`,\n        icon: buttonIcon = 'fas fa-plus',\n        className = 'btn btn-primary',\n        disabled = false,\n        tooltip = `Create a new ${label.toLowerCase()}`\n    } = createButton;\n\n    // Create EntityService instance\n    const service = EntityService.createForEntity({\n        entityName,\n        baseUrl: baseUrl || `/api/admin/${entityName}`,\n        validation,\n        defaultData,\n        filters,\n        options,\n        formatForDisplay\n    });\n\n    // Return entity object directly with hook-based data management\n    const EntityComponent = () => {\n        const [data, setData] = useState([]);\n        const [loading, setLoading] = useState(false);\n        const [pagination, setPagination] = useState(null);\n        const [currentPage, setCurrentPage] = useState(1);\n        const [pageSize, setPageSize] = useState(20);\n        const [currentSearch, setCurrentSearch] = useState('');\n        const [currentFilters, setCurrentFilters] = useState({});\n        const { currentAffiliate, isAffiliateSelected } = useAffiliate();\n        const tableRef = useRef();\n\n        // Load data function with pagination support\n        const loadData = async (params = {}) => {\n            // Don't load data if no affiliate is selected\n            if (!isAffiliateSelected()) {\n                console.log(`No affiliate selected, skipping ${entityName} data load`);\n                setData([]);\n                setPagination(null);\n                return;\n            }\n\n            setLoading(true);\n            try {\n                // Merge default pagination params with provided params\n                const requestParams = {\n                    page: currentPage,\n                    limit: pageSize,\n                    search: currentSearch,\n                    ...currentFilters,\n                    ...params\n                };\n\n                console.log(`Loading ${entityName} data from ${service.baseUrl} for affiliate ${currentAffiliate?.id}...`, requestParams);\n                const response = await service.get(requestParams);\n                console.log(`${entityName} response:`, response);\n                \n                if (response && response.success) {\n                    setData(response.data || []);\n                    setPagination(response.pagination || null);\n                    \n                    // Update state if pagination params were provided\n                    if (params.page !== undefined) setCurrentPage(params.page);\n                    if (params.limit !== undefined) setPageSize(params.limit);\n                    if (params.search !== undefined) setCurrentSearch(params.search);\n                    if (params.filters !== undefined) setCurrentFilters(params.filters);\n                } else {\n                    console.error(`Failed to load ${entityName}:`, response?.error || 'Unknown error');\n                    setData([]);\n                    setPagination(null);\n                }\n            } catch (error) {\n                console.error(`Error loading ${entityName}:`, error);\n                setData([]);\n                setPagination(null);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        // Load data on mount and when affiliate changes\n        useEffect(() => {\n            if (isAffiliateSelected()) {\n                loadData();\n            }\n        }, [currentAffiliate?.id]);\n\n        // Listen for affiliate changes\n        useEffect(() => {\n            const handleAffiliateChange = () => {\n                if (isAffiliateSelected()) {\n                    loadData();\n                }\n            };\n\n            window.addEventListener('affiliateChanged', handleAffiliateChange);\n            return () => window.removeEventListener('affiliateChanged', handleAffiliateChange);\n        }, []);\n\n        // Pagination handlers\n        const handlePageChange = (page) => {\n            loadData({ page });\n        };\n\n        const handlePageSizeChange = (newLimit) => {\n            loadData({ page: 1, limit: newLimit });\n        };\n\n        const handleSearch = (searchTerm, filters) => {\n            loadData({ page: 1, search: searchTerm, filters });\n        };\n\n        // CRUD handlers\n        const handleCreate = async (entityData) => {\n            try {\n                const response = await service.create(entityData);\n                if (response && response.success) {\n                    setData(prev => [...prev, response.data]);\n                    return response.data;\n                } else {\n                    throw new Error(response?.error || 'Create failed');\n                }\n            } catch (error) {\n                console.error(`Error creating ${entityName}:`, error);\n                throw error;\n            }\n        };\n\n        const handleUpdate = async (id, entityData) => {\n            try {\n                const response = await service.update(id, entityData);\n                if (response && response.success) {\n                    setData(prev => prev.map(item => \n                        item.id === id ? response.data : item\n                    ));\n                    return response.data;\n                } else {\n                    throw new Error(response?.error || 'Update failed');\n                }\n            } catch (error) {\n                console.error(`Error updating ${entityName}:`, error);\n                throw error;\n            }\n        };\n\n        const handleDelete = async (id) => {\n            try {\n                const response = await service.delete(id);\n                if (response && response.success) {\n                    setData(prev => prev.filter(item => item.id !== id));\n                    return true;\n                } else {\n                    throw new Error(response?.error || 'Delete failed');\n                }\n            } catch (error) {\n                console.error(`Error deleting ${entityName}:`, error);\n                throw error;\n            }\n        };\n\n        const handleGetById = async (id) => {\n            try {\n                const response = await service.getById(id);\n                if (response && response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response?.error || 'Get by ID failed');\n                }\n            } catch (error) {\n                console.error(`Error getting ${entityName} by ID:`, error);\n                throw error;\n            }\n        };\n\n        // Generic action handlers\n        const actionHandlers = {\n            create: customHandlers.create || (() => {\n                // Check if we have editor configuration\n                if (editorConfig && editorConfig.fields) {\n                    // Use the configured editor instead of prompt\n                    return null; // Let EntityTable handle this with its editor\n                } else {\n                    // Fallback to prompt for simple entities\n                    const defaultData = service.getDefaultEntityData();\n                    const name = prompt(`Enter ${entityName} name:`);\n                    if (name) {\n                        return handleCreate({ ...defaultData, name });\n                    }\n                }\n            }),\n            edit: customHandlers.edit || ((type, id) => {\n                // Check if we have editor configuration\n                if (editorConfig && editorConfig.fields) {\n                    // Use the configured editor instead of prompt\n                    return null; // Let EntityTable handle this with its editor\n                } else {\n                    // Fallback to prompt for simple entities\n                    const item = data.find(d => d.id === id);\n                    if (item) {\n                        const name = prompt(`Edit ${entityName} name:`, item.name);\n                        if (name && name !== item.name) {\n                            return handleUpdate(id, { ...item, name });\n                        }\n                    }\n                }\n            }),\n            delete: customHandlers.delete || ((type, id) => {\n                const item = data.find(d => d.id === id);\n                if (item && window.confirm(`¿Estás seguro de eliminar \"${item.name || `${entityName} ${id}`}\"?`)) {\n                    return handleDelete(id);\n                }\n            }),\n            // Search and filtering\n            search: customHandlers.search || ((searchTerm, filters) => {\n                loadData({ search: searchTerm, ...filters });\n            }),\n            // Custom handlers\n            ...customHandlers\n        };\n\n        // Handle create new action\n        const handleCreateNew = () => {\n            // Use the EntityTable's handleCreateNew method through ref\n            if (tableRef.current && tableRef.current.handleCreateNew) {\n                tableRef.current.handleCreateNew();\n            }\n        };\n\n        // Handle save entity\n        const handleSaveEntity = async (entityData, id) => {\n            try {\n                let response;\n                if (id) {\n                    response = await handleUpdate(id, entityData);\n                } else {\n                    response = await handleCreate(entityData);\n                }\n                \n                if (response) {\n                    // Refresh data after successful save\n                    loadData();\n                }\n                return response;\n            } catch (error) {\n                console.error(`Error saving ${entityName}:`, error);\n                throw error;\n            }\n        };\n\n        // Handle cancel edit\n        const handleCancelEdit = () => {\n            // This will be handled by EntityTable internally\n        };\n\n        // Entity table configuration\n        const entityTableConfig = {\n            entityType: entityName,\n            columns: columns.length > 0 ? columns : getDefaultColumns(data[0]),\n            enableSearch: true, // Enable search by default\n            filters: [], // No default filters, only search\n            actionHandlers,\n            onSearch: handleSearch,\n            onPageChange: handlePageChange,\n            onPageSizeChange: handlePageSizeChange,\n            onLoadEntity: handleGetById,\n            onSaveEntity: handleSaveEntity,\n            onCancelEdit: handleCancelEdit,\n            // Add editor configuration\n            editorType: editorType,\n            editorConfig: editorConfig,\n            ...tableConfig\n        };\n\n        return (\n            <div className=\"content-section\">\n                <div className=\"content-header\">\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                        <div>\n                            <h1>\n                                <i className={`${icon || 'fas fa-table'} me-2`}></i>\n                                {label}\n                            </h1>\n                            {description && <p className=\"text-muted mb-0\">{description}</p>}\n                        </div>\n                        {show && (\n                            <div>\n                                <button \n                                    className={className}\n                                    onClick={handleCreateNew}\n                                    disabled={disabled}\n                                    title={tooltip}\n                                >\n                                    <i className={`${buttonIcon} me-1`}></i>\n                                    {text}\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <EntityTable \n                            ref={tableRef}\n                            data={{ data, pagination }}\n                            config={entityTableConfig}\n                            loading={loading}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    // Return entity object with component\n    return {\n        key,\n        label,\n        icon,\n        group,\n        description,\n        component: customComponent || EntityComponent,\n        data: [],\n        loading: false,\n        service\n    };\n}\n\n/**\n * Generate default columns based on data structure\n * @param {object} sampleData - Sample data object\n * @returns {Array} Default columns configuration\n */\nfunction getDefaultColumns(sampleData) {\n    if (!sampleData) return [];\n\n    const columns = [];\n    const keys = Object.keys(sampleData);\n\n    // Always include ID if present\n    if (keys.includes('id')) {\n        columns.push({\n            field: 'id',\n            header: 'ID',\n            type: 'text',\n            width: '80px'\n        });\n    }\n\n    // Add name field if present\n    if (keys.includes('name')) {\n        columns.push({\n            field: 'name',\n            header: 'Name',\n            type: 'text'\n        });\n    }\n\n    // Add other common fields\n    const commonFields = ['title', 'email', 'status', 'description', 'slug'];\n    commonFields.forEach(field => {\n        if (keys.includes(field) && !columns.some(col => col.field === field)) {\n            columns.push({\n                field,\n                header: field.charAt(0).toUpperCase() + field.slice(1),\n                type: field === 'status' ? 'badge' : 'text'\n            });\n        }\n    });\n\n    // Add date fields\n    const dateFields = ['created_at', 'updated_at'];\n    dateFields.forEach(field => {\n        if (keys.includes(field)) {\n            columns.push({\n                field,\n                header: field === 'created_at' ? 'Created' : 'Updated',\n                type: 'date'\n            });\n        }\n    });\n\n    return columns;\n}\n\n\nexport default { createAutoEntity };\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Admin from './pages/Admin';\nimport { AffiliateProvider } from './contexts/AffiliateContext';\nimport './App.css';\n\nexport * from './utils';\nexport { default as EntityService } from './services/EntityService';\nexport { createAutoEntity } from './utils/entityFactory.jsx';\n\n// Error Boundary Component to prevent white screen\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false, error: null, errorInfo: null };\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // Log error details\n        console.error('React Error Boundary caught an error:', error, errorInfo);\n        this.setState({\n            error: error,\n            errorInfo: errorInfo\n        });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // Fallback UI\n            return (\n                <div style={{\n                    padding: '20px',\n                    maxWidth: '800px',\n                    margin: '50px auto',\n                    backgroundColor: '#f8f9fa',\n                    border: '1px solid #dee2e6',\n                    borderRadius: '8px',\n                    fontFamily: 'Arial, sans-serif'\n                }}>\n                    <h2 style={{ color: '#dc3545', marginBottom: '20px' }}>\n                        <i className=\"fas fa-exclamation-triangle\" style={{ marginRight: '10px' }}></i>\n                        Something went wrong\n                    </h2>\n                    <p style={{ marginBottom: '20px', color: '#6c757d' }}>\n                        An error occurred while rendering the application. Please check the console for more details.\n                    </p>\n                    \n                    <div style={{ \n                        backgroundColor: '#fff', \n                        padding: '15px', \n                        borderRadius: '4px', \n                        border: '1px solid #dee2e6',\n                        marginBottom: '20px'\n                    }}>\n                        <h5 style={{ color: '#495057', marginBottom: '10px' }}>Error Details:</h5>\n                        <pre style={{ \n                            fontSize: '12px', \n                            color: '#dc3545',\n                            whiteSpace: 'pre-wrap',\n                            wordBreak: 'break-word'\n                        }}>\n                            {this.state.error && this.state.error.toString()}\n                        </pre>\n                    </div>\n\n                    <div style={{ \n                        backgroundColor: '#fff', \n                        padding: '15px', \n                        borderRadius: '4px', \n                        border: '1px solid #dee2e6',\n                        marginBottom: '20px'\n                    }}>\n                        <h5 style={{ color: '#495057', marginBottom: '10px' }}>Stack Trace:</h5>\n                        <pre style={{ \n                            fontSize: '11px', \n                            color: '#6c757d',\n                            whiteSpace: 'pre-wrap',\n                            wordBreak: 'break-word',\n                            maxHeight: '200px',\n                            overflow: 'auto'\n                        }}>\n                            {this.state.errorInfo && this.state.errorInfo.componentStack}\n                        </pre>\n                    </div>\n\n                    <div style={{ textAlign: 'center' }}>\n                        <button \n                            onClick={() => window.location.reload()} \n                            style={{\n                                backgroundColor: '#007bff',\n                                color: 'white',\n                                border: 'none',\n                                padding: '10px 20px',\n                                borderRadius: '4px',\n                                cursor: 'pointer',\n                                marginRight: '10px'\n                            }}\n                        >\n                            <i className=\"fas fa-refresh\" style={{ marginRight: '5px' }}></i>\n                            Reload Page\n                        </button>\n                        <button \n                            onClick={() => this.setState({ hasError: false, error: null, errorInfo: null })} \n                            style={{\n                                backgroundColor: '#28a745',\n                                color: 'white',\n                                border: 'none',\n                                padding: '10px 20px',\n                                borderRadius: '4px',\n                                cursor: 'pointer'\n                            }}\n                        >\n                            <i className=\"fas fa-retry\" style={{ marginRight: '5px' }}></i>\n                            Try Again\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n\n        return this.props.children;\n    }\n}\n\nfunction App({ entities = []}) {\n  return (\n    <ErrorBoundary>\n      <AffiliateProvider>\n        <Router>\n          <Routes>\n            <Route path=\"/login\" element={<Login />} />\n            <Route path=\"/admin/*\" element={<Admin entities={entities} />} />\n            <Route path=\"/\" element={<Navigate to=\"/admin\" replace />} />\n          </Routes>\n        </Router>\n      </AffiliateProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n"],"names":["jsxRuntimeModule","require$$0","require$$1","jsx","jsxs","Fragment","error","data","deps","title","fields","show","_a","filters","defaultData","React","Router"],"mappings":"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","x_google_ignoreList":[0,1,2]}